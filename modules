/*******************************************/
/* OVERVIEW OF MODULES

    MODULE -> reusable piece of code that 
    encapsulates implementation details, can 
    be a standalone file but not always. 
    -> allows isolation
    -> abstracts code (low-level code can
      just be imported)
    -> leads to organized codebase
    -> allows reuse

    NATIVE JS (ES6) MODULES
    -> modules are stored in files, exactly one module per file
    -> scoped to module, strict mode, this undefined, can import and export, asynchronous file downloading
    -> imported synchronously, makes bundling and dead code elimination possible, is a live connection and not a copy
    
    -> import statements are hoisted
    -> modules are strict mode in default

/*******************************************/

//IMPORTING MODULE
// import { addToCart, totalPrice as price, tq } from './shoppingCart.js';
// addToCart('bread', 5);
// console.log(price, tq);

//import everything
// import * as ShoppingCart from './shoppingCart.js';

// console.log('Importing module');

// //console.log(shippingCost); //undefined because private in module only
// ShoppingCart.addToCart('bread', 5);
// console.log(ShoppingCart.totalPrice);

//never mix named and default export
// import add, { addToCart, totalPrice as price, tq }  from './shoppingCart.js';

import add, { cart } from './shoppingCart.js';
add('pizza', 2);
add('bread', 5);
add('apples', 4);

console.log(cart); //imports are a live connection

/***********************************************/
/* MODULE PATTERN 
    -> use functions because can make data private and return values
/***********************************************/

/* const ShoppingCart2 = (function () {
  const cart = [];
  const shippingCost = 10;
  const totalPrice = 237;
  const totalQuantity = 23;

  const addToCart = function (product, quantity) {
    cart.push({ product, quantity });
    console.log(
      `${quantity} ${product} added to the cart (shipping cost is ${shippingCost})`
    );
  };

  const orderStock = function (product, quantity) {
    cart.push({ product, quantity });
    console.log(`${quantity} ${product} ordered from supplier`);
  };

  return {
    addToCart,
    cart,
    totalPrice,
    totalQuantity,
  };
})();

ShoppingCart2.addToCart('apple', 4);
ShoppingCart2.addToCart('pizza', 4);
console.log(ShoppingCart2);
//console.log(ShoppingCart2.shippingCost) //undefined
 */

/***********************************************/
/* COMMONJS MODULES
    -> one file is one module - commonly used in NodeJS
/***********************************************/

/* //export
export.addTocart = function (product, quantity) {
  cart.push({ product, quantity });
  console.log(
    `${quantity} ${product} added to the cart (shipping cost is ${shippingCost})`
  );
};

//import
const { addTocart} = require('./shoppingCart.js'); */

/***********************************************/
/* COMMAND LINE
  -> dir - show contents of the current folder
  -> cd - change directory
  -> .. - go up the file tree
  -> cd ../.. - move up two levels
  -> clear - to clear
  -> mkdir - create new folder
  -> edit - to create new file
  -> del - to delete a file
  -> mv {file} {location} - to move a file
  -> rmdir - remove directory
/***********************************************/

/***********************************************/
/* INTRODUCTION TO NPM
/***********************************************/

// importing cloneDeep from lodash
// import cloneDeep from './node_modules/lodash-es/cloneDeep.js';
import cloneDeep from 'lodash-es';

const state = {
  cart: [
    { product: 'bread', quantity: 5 },
    { product: 'pizza', quantity: 5 },
  ],
  user: { loggedIn: true },
};

const stateClone = Object.assign({}, state);
const stateDeepClone = cloneDeep(state); //deep cloningc
console.log(stateDeepClone);
state.user.loggedIn = false;
console.log(stateClone);

/**************************************/
/* PARCEL
  -> npx parcel index.html (run parcel)
  -> npm run dev
/**************************************/

// maintains state whenever testing / hot module replacement
if (module.hot) {
  module.hot.accept();
}

/***********************************************/
/* BABEL AND POLYFILLING
  -> parcel already includes Babel
/***********************************************/

class Person {
  greeting = 'Hey';
  constructor(name) {
    this.name = name;
    console.log(`${this.greeting}, ${this.name}`);
  }
}

const juuzo = new Person('Juuzo');

console.log('Juuzo' ?? null);

console.log(cart.find(el => el.quantity >= 2));
Promise.resolve('TEST').then(x => console.log(x));

//polyfilling
import 'core-js/stable';
// import 'core-js/stable/array/find';
// import 'core-js/stable/promise';

// polyfilling async functions
import 'regenerator-runtime/runtime';

/***********************************************/
/* MODERN AND CLEAN CODE
    -> write code so that others can understand it even after a year
    -> use descriptive variable and function names
    -> use DRY principle
    -> encapsulate!
    -> use strong type checks
    -> each function should do only one thing
    -> don't use more than 3 parameters
    -> return the same data type as you received
    -> use arrow functions if it makes it more readable
    -> For OOP, use ES6 classes, implement method chaining, do not use arrow functions as methods (no this keyword)
    -> Nested code: use early return, use ternary, avoid for loops and use array methods, avoid callback-based async APIs
    -> Async code: use async/await, run promises in parallel (promise.all), handle errors and promise rejections
/***********************************************/

/***********************************************/
/* DECLARATIVE AND FUNCTIONAL JS PRINCIPLES
   -> Imperative code: explains how to do things,
      step by step recipe of a cake. (using a for loop on an array)
   -> Declarative code: what to do, step by step gets abstracted away, description of a cake (using a map on an array)
   
   -> Functional programming: declarative programming paradigm, combining pure functions and avoiding side effect and mutation of data

   SIDE EFFECT -> mutation of data outside the scope of the function
   PURE FUNCTION -> a function without side effects and does not depend on external variables
   IMMUTABILITY -> state data is never modified, state is copied and mutated and returned


/***********************************************/

// to make object immutable (can no longer put any properties) - Object.freeze is not deep freeze - cannot add a new element but can change the existing
const spendingLimits = Object.freeze({
  juuzo: 1500,
  tetsuro: 100,
});

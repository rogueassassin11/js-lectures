/////////////////////////////////////////////////
/////////////////////////////////////////////////
// LECTURES

/**********************************************/
/* CONVERTING AND CHECKING NUMBERS
/**********************************************/
//in JS numbers are floating point numbers
/* 
console.log(23 === 23.0);

//base 10 -> 0 - 9
//base 2 -> 0 / 1 => JS represents numbers in this format

console.log(0.1 + 0.2); // 0.300000004

console.log(Number('23'));
console.log(+'23');

//parsing - like type coercion / gets rid of other symbols and returns a number / cannot work with symbols before number
console.log(Number.parseInt('30px', 10));
console.log(Number.parseInt('e23', 10));

console.log(Number.parseInt('2.5rem'));
console.log(Number.parseFloat(' 2.5rem '));

//isNaN -> to check if value is not a number
console.log(Number.isNaN(20)); //false
console.log(Number.isNaN('20')); //false
console.log(Number.isNaN(+'20x')); //true
console.log(Number.isNaN(23 / 0)); //false

// isFinite - better way to check if value is a number
console.log(Number.isFinite(20)); //true
console.log(Number.isFinite('20')); //false
console.log(Number.isFinite(+'20x')); //false
console.log(Number.isFinite(23 / 0)); //false

//isInteger
console.log(Number.isInteger(23));
console.log(Number.isInteger(23.0));
console.log(Number.isInteger(23 / 0));

 */

/**********************************************/
/* MATH AND ROUNDING
/**********************************************/
/* 
//square root
console.log(Math.sqrt(25));
console.log(25 ** (1 / 2));
console.log(8 ** (1 / 3));

//math.max -> to get maximum value / does type coercion but does not parse
console.log(Math.max(5, 18, 23, 11, 2));
console.log(Math.max(5, 18, '23', 11, 2));
console.log(Math.max(5, 18, '23px', 11, 2));

//math.min
console.log(Math.min(5, 18, 23, 11, 2));

//math.pi
console.log(Math.PI * Number.parseFloat('10px') ** 2);

//math.random
console.log(Math.trunc(Math.random() * 6) + 1);

//random int with min and max specified
const randomInt = (min, max) =>
  Math.floor(Math.random() * (max - min) + 1) + min;

console.log(randomInt(10, 20));

//rounding integers
//trunc removes decimal part
console.log(Math.trunc(23.3));

console.log(Math.round(23.3));
console.log(Math.round(23.9));

console.log(Math.ceil(23.3));
console.log(Math.ceil(23.9));

console.log(Math.floor(23.3));
console.log(Math.floor(23.9));

//rounds to 24 in negative numbers
console.log(Math.floor(-23.3));

//rounding decimals
console.log((2.7).toFixed(0)); // returns a string
console.log((2.7).toFixed(3));
console.log((2.345).toFixed(2));
console.log(+(2.345).toFixed(2));
 */

/**********************************************/
/* REMAINDER OPERATOR
/**********************************************/
/* 
console.log(5 % 2); // 1
console.log(5 / 2);
console.log(8 % 3);

console.log(6 % 2);
console.log(6 / 2);

console.log(7 % 2);
console.log(7 / 2);

const isEven = n => n % 2 === 0;
console.log(isEven(8));
console.log(isEven(23));
console.log(isEven(514));

labelBalance.addEventListener('click', function () {
  [...document.querySelectorAll('.movements__row')].forEach(function (row, i) {
    if (i % 2 === 0) {
      row.style.backgroundColor = 'orangered';
    }

    if (i % 3 === 0) {
      row.style.backgroundColor = 'blue';
    }
  });
}); */

/**********************************************/
/* BIGINT - added in 2020
/**********************************************/
/* 
//biggest no. js can use
console.log(2 ** 53 - 1);
console.log(Number.MAX_SAFE_INTEGER);

//bigint
console.log(483294200329048324823084342304380482n);
console.log(BigInt(48329420032904832482));

//Operations - Math methods do not work!
console.log(10000n + 10000n);
console.log(2319030912130213201130310n * 2139023n);
//console.log(Math.sqrt(16n));

//bigint cannot mix with normal numbers
const huge = 34804928424204408n;
const num = 23;
console.log(huge * BigInt(num));

//bigint exceptions
console.log(20n > 15); // true
console.log(20n === 20); // false

console.log(huge + `is REALLY BIG!`);

//divisions
console.log(11n / 3n);
console.log(10 / 3);
 */

/**********************************************/
/* CREATING DATES
/**********************************************/
/* 
// creating a date
const now = new Date();
console.log(now);

console.log(new Date('Jan 28 2021 23:01:24'));
console.log(new Date('December 24, 2015'));

console.log(new Date(account1.movementsDates[0]));
console.log(new Date(2037, 10, 19, 15, 23, 5));
console.log(new Date(2037, 10, 33));

//unix timestamp
console.log(new Date(0));
console.log(new Date(3 * 24 * 60 * 60 * 1000));

//working with dates
const future = new Date(2037, 10, 19, 15, 23, 5);
console.log(future);
console.log(future.getFullYear());
console.log(future.getMonth()); //zero-based
console.log(future.getDate());
console.log(future.getHours());
console.log(future.getMinutes());
console.log(future.getSeconds());
console.log(future.toISOString());
console.log(future.getTime());

//present timestamp
console.log(Date.now());

//to set a date aspect
future.setFullYear(2040);
console.log(future);
 */

/**********************************************/
/* OPERATIONS WITH DATES
/**********************************************/
/* 
const future = new Date(2037, 10, 19, 15, 23, 5);
console.log(Number(future));

const calcDaysPassed = (date1, date2) =>
  Math.abs((date2 - date1) / (1000 * 60 * 60 * 24));

const days1 = calcDaysPassed(new Date(2037, 3, 14), new Date(2037, 3, 24));
console.log(days1);
 */

/**********************************************/
/* INTERNATIONALIZING NUMBERS
/**********************************************/
/* 
const num = 3884764.23;

const options = {
  style: 'currency', //unit / percent / currency
  unit: 'celsius',
  currency: 'EUR',
  //useGrouping: false, -> comma grouping
};

console.log('US: ', new Intl.NumberFormat('en-US', options).format(num));
console.log('Germany: ', new Intl.NumberFormat('de-DE', options).format(num));
console.log('Syria: ', new Intl.NumberFormat('ar-SY', options).format(num));
console.log(
  navigator.language,
  new Intl.NumberFormat(navigator.language, options).format(num)
);
 */

/**********************************************/
/* TIMERS: SETTIMEOUT / SETINTERVAL
/**********************************************/
/* 
//asynchronous javascript -> does not stop but works in the background

//settimeout - can only be executed once
const ingredients = ['olives', 'spinach'];

const pizzaTimer = setTimeout(
  (ing1, ing2) => console.log(`Here is your pizza with ${ing1} and ${ing2}!`),
  3000,
  ...ingredients
);
console.log('Waiting...');

if (ingredients.includes('spinach')) clearTimeout(pizzaTimer);

//setInterval - can be executed many times
setInterval(function () {
  const now = new Date();
  console.log(now);
}, 2000);

// clock-like
// setInterval(function () {
//   const date = new Date();
//   const hours = date.getHours();
//   const minutes = date.getMinutes();
//   const second = date.getSeconds();

//   console.log(`${hours}:${minutes}:${second}`);
// }, 1000);
 */

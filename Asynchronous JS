/***********************************************/
/* LECTURE NOTES

  SYNCHRONOUS CODE - executed line by line,
each line of code waiting for the previous line to finish

  ASYNCHRONOUS CODE - executed after a task in the background finishes / non-blocking / doesn't wait / not occuring at the same time

  img.src => setting a source attribute is asynchronous

  listening for 'load' event -> also asynchronous

  AJAX -> Asynchronous JavaScript and XML -> request data from web servers dynamically

  API -> piece of software to be used by another software to allow applications to interact with each other

  ONLINE / WEB API -> application running on the server, receiving requests for data and sends data back as response

  XML -> old data format to transmit messages on the web

  JSON -> new modern data format that is a javascript object

  CORS -> Cross-origin resource sharing


  REQUEST-RESPONSE MODEL / CLIENT-SERVER ARCHITECTURE
  -----------------------------------------   
  1. DOMAIN NAME SERVER -> converts url to ip-address of web server

  2. TRANSMISSION CONTROL PROTOCOL/IP Socket connection -> sets the rules about how data travels across the web / breaks down requests into packets and reassemble them

  3. HYPERTEXT TRANSFER PROTOCOL -> allows clients and web servers to communicate

  4. HTTP RESPONSE 

  5. Index.html is first loaded, scanned for assets, process is repeated for each file


/************************************************/

'use strict';

const btn = document.querySelector('.btn-country');
const countriesContainer = document.querySelector('.countries');

const renderError = function (msg) {
  countriesContainer.insertAdjacentText('beforeend', msg);
  // countriesContainer.style.opacity = 1;
};

const renderCountry = function (data, className = '') {
  const html = `
  <article class="country ${className}">
  <img class="country__img" src="${data.flag}" />
  <div class="country__data">
    <h3 class="country__name">${data.name}</h3>
    <h4 class="country__region">${data.region}</h4>
    <p class="country__row"><span>üë´</span>${(
      +data.population / 1000000
    ).toFixed(1)}M people</p>
    <p class="country__row"><span>üó£Ô∏è</span>${data.languages[0].name}</p>
    <p class="country__row"><span>üí∞</span>${data.currencies[0].name}</p>
  </div>
</article>
`;

  countriesContainer.insertAdjacentHTML('beforeend', html);
  countriesContainer.style.opacity = 1;
};

/////////////////////////////////////////////
// Using REST Countries API with XML

/* const getCountryData = function (country) {
  const request = new XMLHttpRequest();
  request.open('GET', `https://restcountries.eu/rest/v2/name/${country}`);
  request.send();

  request.addEventListener('load', function () {
    //convert JSON
    const [data] = JSON.parse(this.responseText);
    console.log(data);

    const html = `
    <article class="country">
    <img class="country__img" src="${data.flag}" />
    <div class="country__data">
      <h3 class="country__name">${data.name}</h3>
      <h4 class="country__region">${data.region}</h4>
      <p class="country__row"><span>üë´</span>${(
        +data.population / 1000000
      ).toFixed(1)}M people</p>
      <p class="country__row"><span>üó£Ô∏è</span>${data.languages[0].name}</p>
      <p class="country__row"><span>üí∞</span>${data.currencies[0].name}</p>
    </div>
  </article>
  `;

    countriesContainer.insertAdjacentHTML('beforeend', html);
    countriesContainer.style.opacity = 1;
  });
};

getCountryData('japan');
getCountryData('australia');
 */

/////////////////////////////////////////////
// SEQUENCE OF AJAX CALLBACKS IN CALLBACKS
// CALLBACK HELL

/*

const getCountryAndNeighbour = function (country) {
  //AJAX call country 1
  const request = new XMLHttpRequest();
  request.open('GET', `https://restcountries.eu/rest/v2/name/${country}`);
  request.send();

  request.addEventListener('load', function () {
    //convert JSON
    const [data] = JSON.parse(this.responseText);
    console.log(data);

    //render country 1
    renderCountry(data);

    const [neighbour] = data.borders;

    if (!neighbour) return;

    // AJAX call country 2
    const request2 = new XMLHttpRequest();
    request2.open('GET', `https://restcountries.eu/rest/v2/alpha/${neighbour}`);
    request2.send();

    request2.addEventListener('load', function () {
      console.log(this.responseText);

      const data2 = JSON.parse(this.responseText);
      renderCountry(data2, 'neighbour');
    });
  });
};

//getCountryAndNeighbour('portugal');
getCountryAndNeighbour('usa');
 */

/***********************************************/
/* PROMISES AND FETCH API AND CONSUMING PROMISES
  
  PROMISE -> a placeholder for the future result of an asynchronous operation. By using promises you no longer need to rely on events and callbacks. You can chain promises and escape callback hell. 

  PROMISE LIFECYCLE:
  1. PENDING
  2. SETTLED -> either fulfilled or rejected / only settled once and is impossible to change the state
  3. CONSUME -> build the promise first

/***********************************************/

/* old way 
  const request = new XMLHttpRequest();
  request.open('GET', `https://restcountries.eu/rest/v2/name/${country}`);
  request.send(); */

// ES6 -
/* const getCountryData = function (country) {
  const request = fetch(`https://restcountries.eu/rest/v2/name/${country}`)
    .then(function (response) {
      console.log(response);
      return response.json(); // to read the response object use JSON and this will return another promise
    })
    .then(function (data) {
      console.log(data); // final data
      renderCountry(data[0]);
    });
};

getCountryData('portugal'); */

/***********************************************/
/* CHAINING PROMISES (FLAT CHAIN)

  Whatever is returned from a promise is the fulfilled value (success value) of the then method.

  HANDLING REJECTED PROMISES

  -> fetch promise only catches errors from internet disconnection

  THROWING ERRORS MANUALLY
/***********************************************/

/* const getCountryData = function (country) {
  const request = fetch(`https://restcountries.eu/rest/v2/name/${country}`)
    .then(response => {
      console.log(response);
    })
    .then(data => {
      renderCountry(data[0]);
      //const neighbour = data[0].borders[0];
      const neighbour = 'drardr';
      if (!neighbour) return;

      // Country 2
      return fetch(`https://restcountries.eu/rest/v2/alpha/${neighbour}`);
    })
    .then(response => response.json())
    .then(data => renderCountry(data, 'neighbour'))
    .catch(err => {
      console.error(`${err} Sorry!`);
      renderError(`Something went wrong ${err.message}. Try again!`); // will catch any errors on the chain
    })
    .finally(() => {
      countriesContainer.style.opacity = 1;
    }); //always needs to happen no matter what the promise
}; */

//getCountryData('germany');
/* 
btn.addEventListener('click', function () {
  getCountryData('portugal');
});

getCountryData('rararara'); */

/***********************************************/
/* CHAINING PROMISES (FLAT CHAIN)

  THROWING ERRORS MANUALLY
/***********************************************/

const getJSON = function (url, errorMsg = `Something went wrong`) {
  return fetch(url).then(response => {
    if (!response.ok) throw new Error(`${errorMsg} ${response.status}`);

    return response.json();
  });
};

/*
const getCountryData = function (country) {
  //country 1
  getJSON(
    `https://restcountries.eu/rest/v2/name/${country}`,
    'Country not found!'
  )
    .then(data => {
      renderCountry(data[0]);
      const neighbour = data[0].borders[0];
      if (!neighbour) throw new Error('No neighbour found');

      // Country 2
      return getJSON(
        `https://restcountries.eu/rest/v2/alpha/${neighbour}`,
        `Country not found!`
      );
    })
    .then(data => renderCountry(data, 'neighbour'))
    .catch(err => {
      console.error(`${err} Sorry!`);
      renderError(`Something went wrong ${err.message}. Try again!`); // will catch any errors on the chain
    })
    .finally(() => {
      countriesContainer.style.opacity = 1;
    }); //always needs to happen no matter what the promise
};

btn.addEventListener('click', function () {
  getCountryData('portugal');
});

getCountryData('australia');
 */

///////////////////////////////////////
// Coding Challenge #1

/* 
In this challenge you will build a function 'whereAmI' which renders a country ONLY based on GPS coordinates. For that, you will use a second API to geocode coordinates.

Here are your tasks:

PART 1
1. Create a function 'whereAmI' which takes as inputs a latitude value (lat) and a longitude value (lng) (these are GPS coordinates, examples are below).
2. Do 'reverse geocoding' of the provided coordinates. Reverse geocoding means to convert coordinates to a meaningful location, like a city and country name. Use this API to do reverse geocoding: https://geocode.xyz/api.
The AJAX call will be done to a URL with this format: https://geocode.xyz/52.508,13.381?geoit=json. Use the fetch API and promises to get the data. Do NOT use the getJSON function we created, that is cheating üòâ
3. Once you have the data, take a look at it in the console to see all the attributes that you recieved about the provided location. Then, using this data, log a messsage like this to the console: 'You are in Berlin, Germany'
4. Chain a .catch method to the end of the promise chain and log errors to the console
5. This API allows you to make only 3 requests per second. If you reload fast, you will get this error with code 403. This is an error with the request. Remember, fetch() does NOT reject the promise in this case. So create an error to reject the promise yourself, with a meaningful error message.

PART 2
6. Now it's time to use the received data to render a country. So take the relevant attribute from the geocoding API result, and plug it into the countries API that we have been using.
7. Render the country and catch any errors, just like we have done in the last lecture (you can even copy this code, no need to type the same code)

TEST COORDINATES 1: 52.508, 13.381 (Latitude, Longitude)
TEST COORDINATES 2: 19.037, 72.873
TEST COORDINATES 2: -33.933, 18.474

GOOD LUCK üòÄ
*/
/* 
const whereAmI = function (lat, lng) {
  const request = fetch(`https://geocode.xyz/${lat},${lng}?geoit=json`)
    .then(function (response) {
      console.log(response);
      if (response.status === 403)
        throw new Error(`Error 403: You can only make 3 requests per second.`);
      return response.json();
    })
    .then(function (data) {
      console.log(data);

      if (!data.city || !data.country)
        throw new Error(`Error: Cannot locate your place!`);

      console.log(`You are in ${data.city}, ${data.country}!`);

      return fetch(`https://restcountries.eu/rest/v2/name/${data.country}`);
    })
    .then(response => {
      if (!response.ok)
        throw new Error(`Something went wrong with the Countries API`);
      console.log(response);
      return response.json();
    })
    .then(data => {
      console.log(data);
      if (!data[0]) throw new Error(`Country not found!`);
      renderCountry(data[0]);
    })
    .catch(err => {
      console.error(`Something went wrong: ${err}`);
    })
    .finally(() => {
      countriesContainer.style.opacity = 1;
    });
};

// whereAmI('52.508', '13.381');
// whereAmI('19.037', '72.873');
whereAmI('-33.933', '18.474');
 */

/***********************************************/
/* EVENT LOOP

  -> takes callback from the callback queue and puts it into the call stack

  -> asynchronous tasks are in runtime and the event loop decides when to execute

  -> JS has only one thread of execution, no multitasking

  -> microtasks queue - where promises resides and has a higher priority than the callback queue

  Concurrency model - how a language handles multiple things at the same time

  Web API - where asynchronous tasks run
/***********************************************/

// synchronous JS comes first, then microtask queue, then callback queue
/* console.log('Test start');

setTimeout(() => console.log('0 sec timer'), 0);
Promise.resolve('Resolved promise 1').then(res => console.log(res));

Promise.resolve('Resolved promise 2').then(res => {
  for (let i = 0; i < 10000; i++) {}
  console.log(res);
});
console.log('Test end');
 */
// you cannot do high precision timing with setTimeout if it has a microtask with a heavy task

/***********************************************/
/* BUILDING A SIMPLE PROMISE

   -> promises are still objects in JS
   -> creating a promise requires an executor function
   -> promisifying -> convert callbacks into promises
/***********************************************/

/* const lotteryPromise = new Promise(function (resolve, reject) {
  console.log('Lottery draw is happening!');

  setTimeout(function () {
    if (Math.random() >= 0.5) {
      resolve('You WIN!');
    } else {
      reject(new Error('You lost your money!'));
    }
  }, 2000);
});

lotteryPromise.then(res => console.log(res)).catch(err => console.error(err));

//promisifying setTimeout
const wait = function (seconds) {
  return new Promise(function (resolve) {
    setTimeout(resolve, seconds * 1000);
  });
};

wait(1)
  .then(() => {
    console.log('1 second passed');
    return wait(1);
  })
  .then(() => {
    console.log('2 second passed');
    return wait(1);
  })
  .then(() => {
    console.log('3 second passed');
    return wait(1);
  })
  .then(() => console.log(`I waited for 4 seconds`));

//resolves immediately
Promise.resolve('abc').then(x => console.log(x));
Promise.reject('abc').then(x => console.error(x)); */

/***********************************************/
/* PROMISIFYING GEOLOCATION API
/***********************************************/

/* const getPosition = function () {
  return new Promise(function (resolve, reject) {
    // navigator.geolocation.getCurrentPosition(
    //   position => resolve(position),
    //   err => reject(err)
    // );

    navigator.geolocation.getCurrentPosition(resolve, reject);
  });
};

//getPosition().then(pos => console.log(pos));

const whereAmI = function () {
  getPosition()
    .then(pos => {
      const { latitude: lat, longitude: lng } = pos.coords;

      return fetch(`https://geocode.xyz/${lat},${lng}?geoit=json`);
    })
    .then(function (response) {
      console.log(response);
      if (response.status === 403)
        throw new Error(`Error 403: You can only make 3 requests per second.`);
      return response.json();
    })
    .then(function (data) {
      console.log(data);

      if (!data.city || !data.country)
        throw new Error(`Error: Cannot locate your place!`);

      console.log(`You are in ${data.city}, ${data.country}!`);

      return fetch(`https://restcountries.eu/rest/v2/name/${data.country}`);
    })
    .then(response => {
      if (!response.ok)
        throw new Error(`Something went wrong with the Countries API`);
      console.log(response);
      return response.json();
    })
    .then(data => {
      console.log(data);
      if (!data[0]) throw new Error(`Country not found!`);
      renderCountry(data[0]);
    })
    .catch(err => {
      console.error(`Something went wrong: ${err}`);
    })
    .finally(() => {
      countriesContainer.style.opacity = 1;
    });
};

btn.addEventListener('click', whereAmI);
 */

/***********************************************/
/* CODING CHALLENGE 2
/***********************************************/

/* 
Build the image loading functionality that I just showed you on the screen.

Tasks are not super-descriptive this time, so that you can figure out some stuff on your own. Pretend you're working on your own üòâ

PART 1
1. Create a function 'createImage' which receives imgPath as an input. This function returns a promise which creates a new image (use document.createElement('img')) and sets the .src attribute to the provided image path. When the image is done loading, append it to the DOM element with the 'images' class, and resolve the promise. The fulfilled value should be the image element itself. In case there is an error loading the image ('error' event), reject the promise.

If this part is too tricky for you, just watch the first part of the solution.

PART 2
2. Comsume the promise using .then and also add an error handler;
3. After the image has loaded, pause execution for 2 seconds using the wait function we created earlier;
4. After the 2 seconds have passed, hide the current image (set display to 'none'), and load a second image (HINT: Use the image element returned by the createImage promise to hide the current image. You will need a global variable for that üòâ);
5. After the second image has loaded, pause execution for 2 seconds again;
6. After the 2 seconds have passed, hide the current image.

TEST DATA: Images in the img folder. Test the error handler by passing a wrong image path. Set the network speed to 'Fast 3G' in the dev tools Network tab, otherwise images load too fast.

GOOD LUCK üòÄ
*/

/* const imgContainer = document.querySelector('.images');

const wait = function (seconds) {
  return new Promise(function (resolve) {
    setTimeout(resolve, seconds * 1000);
  });
};

const createImage = function (imgPath) {
  return new Promise(function (resolve, reject) {
    const img = document.createElement('img');
    img.src = imgPath;

    img.addEventListener('load', function () {
      imgContainer.append(img);
      resolve(img);
    });

    img.addEventListener('error', function () {
      reject(new Error('Image not found'));
    });
  });
};

let currentImg;

createImage('img/img-1.jpg')
  .then(img => {
    currentImg = img;
    console.log('Image 1 loaded');
    return wait(2);
  })
  .then(() => {
    currentImg.style.display = 'none';
    return createImage('img/img-2.jpg');
  })
  .then(img => {
    currentImg = img;
    console.log('Image 2 loaded');
    return wait(2);
  })
  .then(() => {
    currentImg.style.display = 'none';
  })
  .catch(err => console.error(err));
 */

/***********************************************/
/* CONSUMING PROMISES (ASYNC/AWAIT)

  -> inside async, you can have one or more await
  -> await can help you in assigning promise to a variable 

  RETURNING FROM ASYNC FUNCTION
  -> async/await only returns a promise

/***********************************************/

//async await is same as:
// fetch(`https://restcountries.eu/rest/v2/name/${country}`).then(res => console.log(res))

/* const getPosition = function () {
  return new Promise(function (resolve, reject) {
    navigator.geolocation.getCurrentPosition(resolve, reject);
  });
};

const whereAmI = async function (country) {
  try {
    // Geolocation
    const pos = await getPosition();
    const { latitude: lat, longitude: lng } = pos.coords;

    //reverse geocoding
    const resGeo = await fetch(`https://geocode.xyz/${lat},${lng}?geoit=json`);
    if (!resGeo.ok) throw new Error('Problem getting location data.');

    const dataGeo = await resGeo.json();

    // country data
    const res = await fetch(
      `https://restcountries.eu/rest/v2/name/${dataGeo.country}`
    );
    if (!res.ok) throw new Error('Problem getting country.');

    const data = await res.json();
    renderCountry(data[0]);

    return `You are in ${dataGeo.city}, ${dataGeo.country}`;
  } catch (err) {
    console.error(err);
    renderError(`Something went wrong. ${err.message}`);

    //reject promise returned from async function
    throw err;
  }
}; */

//Returning values from async function
// console.log('1: Will get location');
// // const city = whereAmI(); //doesn't work, returns a promise
// // console.log(city);
// whereAmI()
//   .then(city => console.log(city))
//   .catch(err => console.error(`2: ${err.message}`))
//   .finally(() => console.log('3: Finished getting location.'));

//ASYNC IIFE / ASYNC FUNCTION CALLING ASYNC FUNCTION
/* (async function () {
  try {
    const city = await whereAmI();
    console.log(`2: ${city}`);
  } catch (err) {
    console.error(`2: ${err.message}`);
  }
  console.log('3: Finished getting location.');
})(); */

/***********************************************/
/* TRY-CATCH
/***********************************************/

// try {
//   let y = 1;
//   const x = 2;
//   x = 3;
// } catch (err) {
//   alert(err.message);
// }

/***********************************************/
/* RUNNING PROMISES IN PARALLEL

  -> Promise.all() rejects if one promise fails
  ->
/***********************************************/

/* const get3Countries = async function (c1, c2, c3) {
  try {
    // const [data1] = await getJSON(
    //   `https://restcountries.eu/rest/v2/name/${c1}`
    // );
    // const [data2] = await getJSON(
    //   `https://restcountries.eu/rest/v2/name/${c2}`
    // );
    // const [data3] = await getJSON(
    //   `https://restcountries.eu/rest/v2/name/${c3}`
    // );
    // console.log([data1.capital, data2.capital, data3.capital]);

    // static helper on promises - returns a promise / combinator
    const data = await Promise.all([
      getJSON(`https://restcountries.eu/rest/v2/name/${c1}`),
      getJSON(`https://restcountries.eu/rest/v2/name/${c2}`),
      getJSON(`https://restcountries.eu/rest/v2/name/${c3}`),
    ]);

    console.log(data.map(d => d[0].capital));
  } catch (err) {
    console.error(err);
  }
};

get3Countries('portugal', 'canada', 'tanzania'); */

/***********************************************/
/* OTHER PROMISE COMBINATOR
  -> race, allSettled, any
/***********************************************/

//Promise.race - receives a promise and returns a promise (first settled promise wins the race no matter if fulfilled or rejected)

/* (async function () {
  const res = await Promise.race([
    getJSON(`https://restcountries.eu/rest/v2/name/italy`),
    getJSON(`https://restcountries.eu/rest/v2/name/egypt`),
    getJSON(`https://restcountries.eu/rest/v2/name/mexico`),
  ]);

  console.log(res[0]);
})();

const timeout = function (sec) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new Error('Request took too long!'));
    }, sec * 1000);
  });
};

Promise.race([
  getJSON(`https://restcountries.eu/rest/v2/name/tanzania`),
  timeout(0.1),
])
  .then(res => console.log(res[0]))
  .catch(err => console.error(err));

// Promise.allSettled - return an array of all the settled promises no matter if rejected or not / never short-circuits
Promise.allSettled([
  Promise.resolve('Success'),
  Promise.resolve('Error'),
  Promise.resolve('Another success'),
])
  .then(res => console.log(res))
  .catch(err => console.error(error));

//Promise.any -> [ES2021] -> returns the first fulfilled promise / rejected promises are ignored
Promise.any([
  Promise.resolve('Success'),
  Promise.reject('Error'),
  Promise.resolve('Another success'),
])
  .then(res => console.log(res))
  .catch(err => console.error(error));
 */

/***********************************************/
/* CODING CHALLENGE 3
/***********************************************/

/* 
PART 1
Write an async function 'loadNPause' that recreates Coding Challenge #2, this time using async/await (only the part where the promise is consumed). Compare the two versions, think about the big differences, and see which one you like more.
Don't forget to test the error handler, and to set the network speed to 'Fast 3G' in the dev tools Network tab.

PART 2
1. Create an async function 'loadAll' that receives an array of image paths 'imgArr';
2. Use .map to loop over the array, to load all the images with the 'createImage' function (call the resulting array 'imgs')
3. Check out the 'imgs' array in the console! Is it like you expected?
4. Use a promise combinator function to actually get the images from the array üòâ
5. Add the 'paralell' class to all the images (it has some CSS styles).

TEST DATA: ['img/img-1.jpg', 'img/img-2.jpg', 'img/img-3.jpg']. To test, turn off the 'loadNPause' function.

GOOD LUCK üòÄ
*/

const imgContainer = document.querySelector('.images');

const wait = function (seconds) {
  return new Promise(function (resolve) {
    setTimeout(resolve, seconds * 1000);
  });
};

const createImage = function (imgPath) {
  return new Promise(function (resolve, reject) {
    const img = document.createElement('img');
    img.src = imgPath;

    img.addEventListener('load', function () {
      imgContainer.append(img);
      resolve(img);
    });

    img.addEventListener('error', function () {
      reject(new Error('Image not found'));
    });
  });
};

let currentImg;

// createImage('img/img-1.jpg')
//   .then(img => {
//     currentImg = img;
//     console.log('Image 1 loaded');
//     return wait(2);
//   })
//   .then(() => {
//     currentImg.style.display = 'none';
//     return createImage('img/img-2.jpg');
//   })
//   .then(img => {
//     currentImg = img;
//     console.log('Image 2 loaded');
//     return wait(2);
//   })
//   .then(() => {
//     currentImg.style.display = 'none';
//   })
//   .catch(err => console.error(err));

//PART 1
const loadNPause = async function () {
  try {
    // load image 1
    let img = await createImage('img/img-1.jpg');
    console.log('Image 1 loaded');
    await wait(2);
    img.style.display = 'none';

    //load image 2
    img = await createImage('img/img-2.jpg');
    console.log('Image 2 loaded');
    await wait(2);
    img.style.display = 'none';
  } catch (err) {
    console.log(err);
  }
};
//loadNPause();

//PART 2
const loadAll = async function (imgArr) {
  try {
    const imgs = imgArr.map(async img => await createImage(img));
    console.log(imgs);

    const imgsEl = await Promise.all(imgs);
    console.log(imgsEl);

    imgsEl.forEach(img => img.classList.add('parallel'));
  } catch (err) {
    console.log(err);
  }
};

loadAll(['img/img-1.jpg', 'img/img-2.jpg', 'img/img-3.jpg']);

/***********************************************/
/* LECTURE NOTES

  SYNCHRONOUS CODE - executed line by line,
each line of code waiting for the previous line to finish

  ASYNCHRONOUS CODE - executed after a task in the background finishes / non-blocking / doesn't wait / not occuring at the same time

  img.src => setting a source attribute is asynchronous

  listening for 'load' event -> also asynchronous

  AJAX -> Asynchronous JavaScript and XML -> request data from web servers dynamically

  API -> piece of software to be used by another software to allow applications to interact with each other

  ONLINE / WEB API -> application running on the server, receiving requests for data and sends data back as response

  XML -> old data format to transmit messages on the web

  JSON -> new modern data format that is a javascript object

  CORS -> Cross-origin resource sharing


  REQUEST-RESPONSE MODEL / CLIENT-SERVER ARCHITECTURE
  -----------------------------------------   
  1. DOMAIN NAME SERVER -> converts url to ip-address of web server

  2. TRANSMISSION CONTROL PROTOCOL/IP Socket connection -> sets the rules about how data travels across the web / breaks down requests into packets and reassemble them

  3. HYPERTEXT TRANSFER PROTOCOL -> allows clients and web servers to communicate

  4. HTTP RESPONSE 

  5. Index.html is first loaded, scanned for assets, process is repeated for each file


/************************************************/

'use strict';

const btn = document.querySelector('.btn-country');
const countriesContainer = document.querySelector('.countries');

const renderError = function (msg) {
  countriesContainer.insertAdjacentText('beforeend', msg);
  // countriesContainer.style.opacity = 1;
};

const renderCountry = function (data, className = '') {
  const html = `
  <article class="country ${className}">
  <img class="country__img" src="${data.flag}" />
  <div class="country__data">
    <h3 class="country__name">${data.name}</h3>
    <h4 class="country__region">${data.region}</h4>
    <p class="country__row"><span>üë´</span>${(
      +data.population / 1000000
    ).toFixed(1)}M people</p>
    <p class="country__row"><span>üó£Ô∏è</span>${data.languages[0].name}</p>
    <p class="country__row"><span>üí∞</span>${data.currencies[0].name}</p>
  </div>
</article>
`;

  countriesContainer.insertAdjacentHTML('beforeend', html);
  // countriesContainer.style.opacity = 1;
};

/////////////////////////////////////////////
// Using REST Countries API with XML

/* const getCountryData = function (country) {
  const request = new XMLHttpRequest();
  request.open('GET', `https://restcountries.eu/rest/v2/name/${country}`);
  request.send();

  request.addEventListener('load', function () {
    //convert JSON
    const [data] = JSON.parse(this.responseText);
    console.log(data);

    const html = `
    <article class="country">
    <img class="country__img" src="${data.flag}" />
    <div class="country__data">
      <h3 class="country__name">${data.name}</h3>
      <h4 class="country__region">${data.region}</h4>
      <p class="country__row"><span>üë´</span>${(
        +data.population / 1000000
      ).toFixed(1)}M people</p>
      <p class="country__row"><span>üó£Ô∏è</span>${data.languages[0].name}</p>
      <p class="country__row"><span>üí∞</span>${data.currencies[0].name}</p>
    </div>
  </article>
  `;

    countriesContainer.insertAdjacentHTML('beforeend', html);
    countriesContainer.style.opacity = 1;
  });
};

getCountryData('japan');
getCountryData('australia');
 */

/////////////////////////////////////////////
// SEQUENCE OF AJAX CALLBACKS IN CALLBACKS
// CALLBACK HELL

/*

const getCountryAndNeighbour = function (country) {
  //AJAX call country 1
  const request = new XMLHttpRequest();
  request.open('GET', `https://restcountries.eu/rest/v2/name/${country}`);
  request.send();

  request.addEventListener('load', function () {
    //convert JSON
    const [data] = JSON.parse(this.responseText);
    console.log(data);

    //render country 1
    renderCountry(data);

    const [neighbour] = data.borders;

    if (!neighbour) return;

    // AJAX call country 2
    const request2 = new XMLHttpRequest();
    request2.open('GET', `https://restcountries.eu/rest/v2/alpha/${neighbour}`);
    request2.send();

    request2.addEventListener('load', function () {
      console.log(this.responseText);

      const data2 = JSON.parse(this.responseText);
      renderCountry(data2, 'neighbour');
    });
  });
};

//getCountryAndNeighbour('portugal');
getCountryAndNeighbour('usa');
 */

/***********************************************/
/* PROMISES AND FETCH API AND CONSUMING PROMISES
  
  PROMISE -> a placeholder for the future result of an asynchronous operation. By using promises you no longer need to rely on events and callbacks. You can chain promises and escape callback hell. 

  PROMISE LIFECYCLE:
  1. PENDING
  2. SETTLED -> either fulfilled or rejected / only settled once and is impossible to change the state
  3. CONSUME -> build the promise first

/***********************************************/

/* old way 
  const request = new XMLHttpRequest();
  request.open('GET', `https://restcountries.eu/rest/v2/name/${country}`);
  request.send(); */

// ES6 -
/* const getCountryData = function (country) {
  const request = fetch(`https://restcountries.eu/rest/v2/name/${country}`)
    .then(function (response) {
      console.log(response);
      return response.json(); // to read the response object use JSON and this will return another promise
    })
    .then(function (data) {
      console.log(data); // final data
      renderCountry(data[0]);
    });
};

getCountryData('portugal'); */

/***********************************************/
/* CHAINING PROMISES (FLAT CHAIN)

  Whatever is returned from a promise is the fulfilled value (success value) of the then method.

  HANDLING REJECTED PROMISES

  -> fetch promise only catches errors from internet disconnection

  THROWING ERRORS MANUALLY
/***********************************************/

/* const getCountryData = function (country) {
  const request = fetch(`https://restcountries.eu/rest/v2/name/${country}`)
    .then(response => {
      console.log(response);
    })
    .then(data => {
      renderCountry(data[0]);
      //const neighbour = data[0].borders[0];
      const neighbour = 'drardr';
      if (!neighbour) return;

      // Country 2
      return fetch(`https://restcountries.eu/rest/v2/alpha/${neighbour}`);
    })
    .then(response => response.json())
    .then(data => renderCountry(data, 'neighbour'))
    .catch(err => {
      console.error(`${err} Sorry!`);
      renderError(`Something went wrong ${err.message}. Try again!`); // will catch any errors on the chain
    })
    .finally(() => {
      countriesContainer.style.opacity = 1;
    }); //always needs to happen no matter what the promise
}; */

//getCountryData('germany');
/* 
btn.addEventListener('click', function () {
  getCountryData('portugal');
});

getCountryData('rararara'); */

/***********************************************/
/* CHAINING PROMISES (FLAT CHAIN)

  THROWING ERRORS MANUALLY
/***********************************************/
/* 
const getJSON = function (url, errorMsg = `Something went wrong`) {
  return fetch(url).then(response => {
    if (!response.ok) throw new Error(`${errorMsg} ${response.status}`);

    return response.json();
  });
};

const getCountryData = function (country) {
  //country 1
  getJSON(
    `https://restcountries.eu/rest/v2/name/${country}`,
    'Country not found!'
  )
    .then(data => {
      renderCountry(data[0]);
      const neighbour = data[0].borders[0];
      if (!neighbour) throw new Error('No neighbour found');

      // Country 2
      return getJSON(
        `https://restcountries.eu/rest/v2/alpha/${neighbour}`,
        `Country not found!`
      );
    })
    .then(data => renderCountry(data, 'neighbour'))
    .catch(err => {
      console.error(`${err} Sorry!`);
      renderError(`Something went wrong ${err.message}. Try again!`); // will catch any errors on the chain
    })
    .finally(() => {
      countriesContainer.style.opacity = 1;
    }); //always needs to happen no matter what the promise
};

btn.addEventListener('click', function () {
  getCountryData('portugal');
});

getCountryData('australia');
 */

///////////////////////////////////////
// Coding Challenge #1

/* 
In this challenge you will build a function 'whereAmI' which renders a country ONLY based on GPS coordinates. For that, you will use a second API to geocode coordinates.

Here are your tasks:

PART 1
1. Create a function 'whereAmI' which takes as inputs a latitude value (lat) and a longitude value (lng) (these are GPS coordinates, examples are below).
2. Do 'reverse geocoding' of the provided coordinates. Reverse geocoding means to convert coordinates to a meaningful location, like a city and country name. Use this API to do reverse geocoding: https://geocode.xyz/api.
The AJAX call will be done to a URL with this format: https://geocode.xyz/52.508,13.381?geoit=json. Use the fetch API and promises to get the data. Do NOT use the getJSON function we created, that is cheating üòâ
3. Once you have the data, take a look at it in the console to see all the attributes that you recieved about the provided location. Then, using this data, log a messsage like this to the console: 'You are in Berlin, Germany'
4. Chain a .catch method to the end of the promise chain and log errors to the console
5. This API allows you to make only 3 requests per second. If you reload fast, you will get this error with code 403. This is an error with the request. Remember, fetch() does NOT reject the promise in this case. So create an error to reject the promise yourself, with a meaningful error message.

PART 2
6. Now it's time to use the received data to render a country. So take the relevant attribute from the geocoding API result, and plug it into the countries API that we have been using.
7. Render the country and catch any errors, just like we have done in the last lecture (you can even copy this code, no need to type the same code)

TEST COORDINATES 1: 52.508, 13.381 (Latitude, Longitude)
TEST COORDINATES 2: 19.037, 72.873
TEST COORDINATES 2: -33.933, 18.474

GOOD LUCK üòÄ
*/

const whereAmI = function (lat, lng) {
  const request = fetch(`https://geocode.xyz/${lat},${lng}?geoit=json`)
    .then(function (response) {
      console.log(response);
      if (response.status === 403)
        throw new Error(`Error 403: You can only make 3 requests per second.`);
      return response.json();
    })
    .then(function (data) {
      console.log(data);

      if (!data.city || !data.country)
        throw new Error(`Error: Cannot locate your place!`);

      console.log(`You are in ${data.city}, ${data.country}!`);

      return fetch(`https://restcountries.eu/rest/v2/name/${data.country}`);
    })
    .then(response => {
      if (!response.ok)
        throw new Error(`Something went wrong with the Countries API`);
      console.log(response);
      return response.json();
    })
    .then(data => {
      console.log(data);
      if (!data[0]) throw new Error(`Country not found!`);
      renderCountry(data[0]);
    })
    .catch(err => {
      console.error(`Something went wrong: ${err}`);
    })
    .finally(() => {
      countriesContainer.style.opacity = 1;
    });
};

// whereAmI('52.508', '13.381');
// whereAmI('19.037', '72.873');
whereAmI('-33.933', '18.474');

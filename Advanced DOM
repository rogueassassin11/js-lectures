/************************************************/
/* SELECTING / CREATING / DELETING ELEMENTS
/************************************************/
/* 
// Selecting elements
console.log(document.documentElement);
console.log(document.head);
console.log(document.body);

const header = document.querySelector('.header');
const allSections = document.querySelectorAll('.section');
console.log(allSections);

document.getElementById('section--1');

// selecting element by tagname updates real time - returns a live HTML collection
const allButtons = document.getElementsByTagName('button');
console.log(allButtons);

document.getElementsByClassName('btn');

// Creating and inserting elements
// .insertAdjacentHTML
const message = document.createElement('div');
message.classList.add('cookie-message');
// message.textContent = `We use cookies for improved functionality and analytics.`;
message.innerHTML = `We use cookies for improved functionality and analytics. <button class="btn btn--close-cookie">Got it!</button>`;

//prepend and append can only be seen at one place at a time
// header.prepend(message); //prepend adds as a first child
header.append(message); // appends as a last child
// header.append(message.cloneNode(true));

// header.before(message);
// header.after(message);

// Delete elements
document
  .querySelector('.btn--close-cookie')
  .addEventListener('click', function () {
    message.remove(); //recent addition
    // message.parentElement.removeChild(message); old way
  }); */

/************************************************/
/* STYLES / ATTRIBUTES / CLASSES
/************************************************/
/* 
//styles
message.style.backgroundColor = '#37383d';
message.style.width = '120%';

//you can only get the value of .style if set as inline
console.log(message.style.backgroundColor);

//to get value of styles
console.log(getComputedStyle(message).color);
console.log(getComputedStyle(message).height);

message.style.height =
  Number.parseFloat(getComputedStyle(message).height, 10) + 30 + 'px';

// working with css variables
document.documentElement.style.setProperty('--color-primary', 'orangered');

// Attributes - you can only access expected properties
const logo = document.querySelector('.nav__logo');
console.log(logo.alt);
console.log(logo.src);
console.log(logo.className);

logo.alt = 'Beautiful minimalist logo';

//non-standard attributes
console.log(logo.designer);
console.log(logo.getAttribute('designer'));

//setting attribute
logo.setAttribute('company', 'Bankist');

//gets the relative location
logo.getAttribute('src');

//relative and absolute
const link = document.querySelector('.nav__link--btn');
console.log(link.href);
console.log(link.getAttribute('href'));

//data attributes
console.log(logo.dataset.versionNumber);

// classes
logo.classList.add('c');
logo.classList.remove('c');
logo.classList.toggle('c');
logo.classList.contains('c');

//don't use this:
logo.className = 'juuzo'; //overrides all classes
 */

/************************************************/
/* TYPES OF EVENTS
/************************************************/
/* 
const h1 = document.querySelector('h1');

const alertH1 = function (e) {
  alert('You are reading the heading :)');

  //to listen to an event once - remove it
  // h1.removeEventListener('mouseenter', alertH1);
};

//mouseenter is like css hover
h1.addEventListener('mouseenter', alertH1);

setTimeout(() => h1.removeEventListener('mouseenter', alertH1), 3000);

// //on event property (old)
// h1.onmouseenter = function (e) {
//   alert('You are reading the heading :)');
// };
 */

/************************************************/
/* EVENT PROPAGATION - BUBBLING & CAPTURING
/************************************************/
/* 
const randomInt = (min, max) =>
  Math.floor(Math.random() * (max - min + 1) + min);

const randomColor = () =>
  `rgb(${randomInt(0, 255)}, ${randomInt(0, 255)}, ${randomInt(0, 255)})`;

console.log(randomColor(0, 255));

document.querySelector('.nav__link').addEventListener('click', function (e) {
  this.style.backgroundColor = randomColor();
  console.log('LINK', e.target, e.currentTarget);
  console.log(e.currentTarget === this);

  // stop propagation
  //e.stopPropagation();
});

document.querySelector('.nav__links').addEventListener('click', function (e) {
  this.style.backgroundColor = randomColor();
  console.log('CONTAINER', e.target, e.currentTarget);
});

document.querySelector('.nav').addEventListener(
  'click',
  function (e) {
    this.style.backgroundColor = randomColor();
    console.log('NAV', e.target, e.currentTarget);
  },
);
 */
//add a true as third argument on addEventListener for event capturing

/************************************************/
/* DOM TRAVERSING
/************************************************/
/* 
const h1 = document.querySelector('h1');

//going downwards: selecting child
console.log(h1.querySelectorAll('.highlight'));
console.log(h1.childNodes);
console.log(h1.children);
h1.firstElementChild.style.color = 'white';
h1.lastElementChild.style.color = 'orangered';

//going upwards: parents
console.log(h1.parentNode);
console.log(h1.parentElement);

h1.closest('.header').style.background = 'var(--gradient-secondary)';
h1.closest('h1').style.background = 'var(--gradient-primary)';

//going sideways: siblings
console.log(h1.previousElementSibling);
console.log(h1.nextElementSibling);

console.log(h1.previousSibling); //node
console.log(h1.nextSibling);

console.log(h1.parentElement.children);

[...h1.parentElement.children].forEach(function (el) {
  if (el !== h1) el.style.transform = 'scale(0.5)';
});
 */

/************************************************/
/* DOM LIFECYCLE EVENTS
/************************************************/
/* 
//when HTML is parsed event
document.addEventListener('DOMContentLoaded', function (e) {
  console.log(`HTML parsed and DOM tree built`);
});

//when complete page is loaded event
window.addEventListener('load', function (e) {
  console.log('Page fully loaded');
});

//before unload a user leaves a page - use when filling out a form / or others
// window.addEventListener('beforeunload', function (e) {
//   e.preventDefault();
//   console.log(e);
//   e.returnValue = '';
// });
 */

/************************************************/
/* DEFER AND ASYNC SCRIPT LOADING
/************************************************/

//put the JS Script at the body, so HTML parse script is fetch and executed -> if need to support old browsers

//async and defer is not used to load script at the end part of the body

//async in head - script is fetched asynchronously and executed immediately; not guaranteed to execute in order --> use only if order doesn't matter

//defer in head - script is fetched asynchronously but executed after HTML is parsed; executes in order --> use this for third party scripts / or when needed to be in order

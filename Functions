'use strict';

/****************************/
/* DEFAULT PARAMETERS
/****************************/

/* const bookings = [];

const createBooking = function (
  flightNum,
  numPassengers = 1,
  price = 199 * numPassengers
) {
  //ES5
  // numPassengers = numPassengers || 1;
  // price = price || 199;

  const booking = { flightNum, numPassengers, price };

  console.log(booking);
  bookings.push(booking);
};

createBooking('LH123');
createBooking('LH123', 2, 800);
createBooking('LH123', 2);
createBooking('LH123', 5);

//you cannot skip parameters, use undefined instead when want to use the default value
createBooking('LH123', undefined, 1000); */

/****************************/
/* VALUE VS. REFERENCE
/****************************/

// JavaScript has no pass by reference;

/* const flight = 'LH234';
const juuzo = {
  name: 'Juuzo Inui',
  passport: 24739479284,
};

const checkIn = function (flightNum, passenger) {
  flightNum = 'LH999';
  passenger.name = 'Mr. ' + passenger.name;

  if (passenger.passport === 24739479284) {
    alert('Check in');
  } else {
    alert('Wrong passport!');
  }
};

checkIn(flight, jonas);
console.log(flight);
console.log(juuzo);

const newPassport = function (person) {
  person.passport = math.trunc(Math.random() * 1000000000);
};

newPassport(jonas); // wrong passport because object was manipulated
checkIn(flight, jonas); */

/*****************************************/
/* FIRST CLASS VS. HIGHER ORDER FUNCTIONS
/*****************************************/

// first-class functions are simply values and just another 'type' of object. 1. can be stored in variables/properties. 2. can be passed as arguments. 3. can be returned. 4. can call methods on functions

// higher-order functions - receives a function and returns a new function

/*****************************************/
/* HIGHER ORDER FUNCTIONS
/*****************************************/
/* 
const oneWord = function (str) {
  return str.replace(/ /g, '').toLowerCase();
};

const upperFirstWord = function (str) {
  const [first, ...others] = str.split(' ');
  return [first.toUpperCase(), ...others].join(' ');
};

//higher order function
const transformer = function (str, fn) {
  console.log(`Original string ${str}`);
  console.log(`Transformed string: ${fn(str)}`);

  console.log(`Transformed by: ${fn.name}`);
};

transformer('JavaScript is the best!', upperFirstWord);
transformer('JavaScript is the best!', oneWord);

// JS uses callbacks all the time!
const high5 = function () {
  console.log('High Five!');
};

document.body.addEventListener('click', high5);

['Juuzo', 'Mary', 'Tetsuro'].forEach(high5);
 */

/*****************************************/
/* FUNCTIONS RETURNING FUNCTIONS
/*****************************************/

/* const greet = function (greeting) {
  return function (name) {
    console.log(`${greeting} ${name}`);
  };
};

const greeterHey = greet('Hey');
greeterHey('Juuzo');
greeterHey('Kabu');

greet('Hello')('Natsume');

const greetArr = greeting => name => console.log(`${greeting} ${name}`);

greetArr('Hi')('Haytham'); */

/*****************************************/
/* CALL AND APPLY METHODS
/*****************************************/

/* const lufthansa = {
  airline: 'Lufthansa',
  iataCode: 'LH',
  bookings: [],
  book: function (flightNum, name) {
    console.log(
      `${name} booked a seat on ${this.airline} flight ${this.iataCode}${flightNum}`
    );
    this.bookings.push({ flight: `${this.iataCode}${flightNum}`, name });
  },
};

lufthansa.book(239, 'Juuzo Inui');
lufthansa.book(635, 'Kaburagi');
console.log(lufthansa);

const eurowings = {
  airline: 'Eurowings',
  iataCode: 'EW',
  bookings: [],
};

//manipulating this keyword
const book = lufthansa.book;

//book(23, 'Natsume'); this is undefined

//set the this keyword by call method
book.call(eurowings, 23, 'Natsume');
console.log(eurowings);

book.call(lufthansa, 239, 'Tetsuro Arahabaki');
console.log(lufthansa);

const swiss = {
  airline: 'Swiss Air Lines',
  iataCode: 'LX',
  bookings: [],
};

book.call(swiss, 583, 'Mary Steinberg');
console.log(swiss);

//apply method - takes in an array (old)
const flightData = [583, 'Kurenai'];
book.apply(swiss, flightData);
console.log(swiss);

//using spread operator
book.call(swiss, ...flightData); */

/*****************************************/
/* BIND
/*****************************************/

//returns a new function with this object set to a different object
/* 
const bookEW = book.bind(eurowings);
const bookLH = book.bind(lufthansa);
const bookLX = book.bind(swiss);

bookEW(23, 'Leo');

//setting a default parameter with bind (partial application)
const bookEW23 = book.bind(eurowings, 23);
bookEW23('Juuzo Inui');
bookEW23('Mary Steinberg');

// with event listeners
lufthansa.planes = 300;
lufthansa.buyPlane = function () {
  console.log(this);
  this.planes++;
  console.log(this.planes);
};

//document.querySelector('.buy').addEventListener('click', lufthansa.buyPlane); -- button is the this keyword because this is where the function is attached

document
  .querySelector('.buy')
  .addEventListener('click', lufthansa.buyPlane.bind(lufthansa));

// more partial application - order of parameters matter
const addTax = (rate, value) => value + value * rate;
console.log(addTax(0.1, 200));

const addVAT = addTax.bind(null, 0.23);
console.log(addVAT(100));

//small challenge - function returning functions
const addVAT2 = function (rate) {
  return function (value) {
    console.log(`addVAT2: ${value + value * rate}`);
  };
};

addVAT2(0.23)(100); */

/*****************************************/
/* CODING CHALLENGE #1
/*****************************************/
/* 
Let's build a simple poll app!

A poll has a question, an array of options from which people can choose, and an array with the number of replies for each option. This data is stored in the starter object below.

Here are your tasks:

1. Create a method called 'registerNewAnswer' on the 'poll' object. The method does 2 things:
  1.1. Display a prompt window for the user to input the number of the selected option. The prompt should look like this:
        What is your favourite programming language?
        0: JavaScript
        1: Python
        2: Rust
        3: C++
        (Write option number)
  
  1.2. Based on the input number, update the answers array. For example, if the option is 3, increase the value AT POSITION 3 of the array by 1. Make sure to check if the input is a number and if the number makes sense (e.g answer 52 wouldn't make sense, right?)
2. Call this method whenever the user clicks the "Answer poll" button.
3. Create a method 'displayResults' which displays the poll results. The method takes a string as an input (called 'type'), which can be either 'string' or 'array'. If type is 'array', simply display the results array as it is, using console.log(). This should be the default option. If type is 'string', display a string like "Poll results are 13, 2, 4, 1". 
4. Run the 'displayResults' method at the end of each 'registerNewAnswer' method call.

HINT: Use many of the tools you learned about in this and the last section ðŸ˜‰

BONUS: Use the 'displayResults' method to display the 2 arrays in the test data. Use both the 'array' and the 'string' option. Do NOT put the arrays in the poll object! So what shoud the this keyword look like in this situation?

BONUS TEST DATA 1: [5, 2, 3]
BONUS TEST DATA 2: [1, 5, 3, 9, 6, 1]

GOOD LUCK ðŸ˜€
*/

/* const poll = {
  question: 'What is your favourite programming language?',
  options: ['0: JavaScript', '1: Python', '2: Rust', '3: C++'],

  //to generate [0,0,0,0]
  answers: new Array(4).fill(0),
  registerNewAnswer: function () {
    //taking option/answer as input
    let option = Number(
      prompt(
        `${this.question}\n${this.options.join('\n')} \n(Write option number)`
      )
    );

    //storing option/answer to answers array

    self = this.answers;
    if (typeof option === 'number' && option <= 3 && option >= 0) {
      self[option] += 1;
      poll.displayResults();
    } else {
      console.log(`Please choose between 0, 1, 2, and 3`);
    }
    //console.log(this.answers);
  },
  displayResults: function (type = 'array') {
    type = prompt(`Display results in what manner: (string or array)`);

    //self = this.answers;
    if (type === 'array') {
      console.log(this.answers);
    } else if (type === 'string') {
      const str = this.answers.join(', ');

      console.log(`Poll results are ${str}`);
    } else {
      console.log(`Please choose between string or array only.`);
    }
  },
};

//2. Add event listener to button
document
  .querySelector('.poll')
  .addEventListener('click', poll.registerNewAnswer.bind(poll));

// BONUS
/* BONUS TEST DATA 1: [5, 2, 3]
BONUS TEST DATA 2: [1, 5, 3, 9, 6, 1] */
/*
poll.displayResults.call({ answers: [5, 2, 3] });
poll.displayResults.call({ answers: [1, 5, 3, 9, 6, 1] }); */

/*****************************************/
/* IIFE
/*****************************************/

// executed once and never again run
/* 
const runOnce = function () {
  console.log('This will never run again.');
};
runOnce();

//IIFE syntax (with encapsulation/data privacy)
(function () {
  console.log('This will never run again.');
  const isPrivate = 23;
})();

//console.log(isPrivate); will return an error

//on arrow function
(() => console.log(`This will ALSO not run again.`))();

//scoping with a block
{
  const isPrivate = 23;
  var notPrivate = 46;
} */

/*****************************************/
/* CLOSURES
/*****************************************/

//not explicitly used - a closure is not a tangible object
//makes a function remember all the function's variables at the function's creation state
//any function has access to the variable environment of the execution context where it was created even after the execution context is gone
// a closure gives a function access to all the variables of its parent function even after the parent function is returned

//first example
const secureBooking = function () {
  let passengerCount = 0;

  return function () {
    passengerCount++;
    console.log(`${passengerCount} passengers`);
  };
};

const booker = secureBooking();

booker();
booker();
booker();
console.dir(booker); // to see closures on [[scopes]]

//second example - f is defined in global scope, but can still access the a variable
let f;

const g = function () {
  const a = 23;
  f = function () {
    console.log(a * 2);
  };
};

const h = function () {
  const b = 777;
  f = function () {
    console.log(b * 2);
  };
};

g();
f();
console.dir(f);
h();
f(); // re-assigned f-function but still has closure
console.dir(f);

//third example - timer
const boardPassengers = function (n, wait) {
  const perGroup = n / 3;

  //setTimeout is a closure in this because perGroup was accessed even after this parent function is done
  setTimeout(function () {
    console.log(`We are now boarding all ${n} passengers`);
    console.log(`THere are three groups, each with ${perGroup} passengers`);
  }, 1000);

  console.log(`Will start boarding in ${wait} seconds`);
};

boardPassengers(180, 3);

const perGroup = 1000;

/*****************************************/
/* CODING CHALLENGE #2
/*****************************************/

/* 
This is more of a thinking challenge than a coding challenge ðŸ¤“

Take the IIFE below and at the end of the function, attach an event listener that changes the color of the selected h1 element ('header') to blue, each time the BODY element is clicked. Do NOT select the h1 element again!

And now explain to YOURSELF (or someone around you) WHY this worked! Take all the time you need. Think about WHEN exactly the callback function is executed, and what that means for the variables involved in this example.

GOOD LUCK ðŸ˜€
*/

(function () {
  const header = document.querySelector('h1');
  header.style.color = 'red';

  document.body.addEventListener('click', function () {
    header.style.color = 'blue';
  });
})();

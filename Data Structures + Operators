'use strict';

const weekdays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];

//ES6 object literal can compute for property names
const openingHours = {
  [weekdays[3]]: {
    open: 12,
    close: 22,
  },
  [weekdays[4]]: {
    open: 11,
    close: 23,
  },
  sat: {
    open: 0, // Open 24 hours
    close: 24,
  },
};

const restaurant = {
  name: 'Classico Italiano',
  location: 'Via Angelo Tavanti 23, Firenze, Italy',
  categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
  starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
  mainMenu: ['Pizza', 'Pasta', 'Risotto'],

  //ES6 enhanced object literal:
  openingHours,

  //new way to write method - no function keyword
  order(starterIndex, mainIndex) {
    return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
  },

  //destructuring arguments in a function / method
  orderDelivery: function ({
    starterIndex = 1,
    mainIndex = 0,
    time = '20:00',
    address,
  }) {
    console.log(
      `Order received! ${this.starterMenu[starterIndex]} and ${this.mainMenu[mainIndex]} will be delivered to ${address} at ${time}`
    );
  },

  orderPasta: function (ing1, ing2, ing3) {
    console.log(`Here is your delicious pasta with ${ing1}, ${ing2}, ${ing3}`);
  },

  orderPizza: function (mainIngredient, ...otherIngredients) {
    console.log(mainIngredient);
    console.log(otherIngredients);
  },
};

/********************************/
/* WORKING WITH STRINGS III
/********************************/
/* 
//Split and join
console.log('a+very+nice+string'.split('+'));
console.log('Juuzo Inui'.split(' '));

const [firstName, lastName] = 'Juuzo Inui'.split(' ');

const newName = ['Mr.', firstName, lastName.toUpperCase()].join(' ');
console.log(newName);

const capitalizeName = function (name) {
  const names = name.split(' ');
  const namesUpper = [];

  for (const n of names) {
    //namesUpper.push(n[0].toUpperCase() + n.slice(1));
    namesUpper.push(n.replace(n[0], n[0].toUpperCase()));

    console.log(namesUpper.join(' '));
  }
};

capitalizeName('haytham senku kenway');
capitalizeName('juuzo inui');

//Padding
const message = 'Go to gate 23!';

console.log(message.padStart(25, '+').padEnd(30, '+')); //the number is the total length of the string
console.log('Jonas'.padStart(25, '+').padEnd(30, '+'));

const maskCreditCard = function (number) {
  const str = number + ''; //+ with a string converts it to a string
  const last = str.slice(-4);
  return last.padStart(str.length, '*');
};

console.log(maskCreditCard(12345678));
console.log(maskCreditCard(433489398939490));
console.log(maskCreditCard('93938902309908'));

// repeat
const message2 = 'Bad weather... all departures delayed... ';
console.log(message2.repeat(5));

const planesInLine = function (n) {
  console.log(`There are ${n} planes in line ${'<-|->'.repeat(n)}`);
};

planesInLine(5);
planesInLine(3);
planesInLine(12);
 */

/********************************/
/* WORKING WITH STRINGS II
/********************************/

/* const airline = 'TAP Air Portugal';

console.log(airline.toLocaleLowerCase());
console.log('juuzo'.toUpperCase());

// Fix capitalization in name
const passenger = 'jUuZO';
const passengerLower = passenger.toLowerCase();
const passengerCorrect =
  passengerLower[0].toUpperCase() + passengerLower.slice(1);
console.log(passengerCorrect);

// Comparing emails
const email = 'hello@juuzo.io';
const loginEmail = '  Hello@Juuzo.Io \n';

const lowerEmail = loginEmail.toLowerCase();
const trimmedEmail = lowerEmail.trim();
console.log(trimmedEmail);

const normalizedEmail = loginEmail.toLowerCase().trim();
console.log(normalizedEmail);
console.log(email === normalizedEmail);

// replacing - replace method returns a brand new string and is case-sensitive
const priceGB = '288,97L';
const priceUS = priceGB.replace('L', '$').replace(',', '.');
console.log(priceUS);

const announcement =
  'All passengers come to boarding door 23. Boarding door 23!';
console.log(announcement.replace('door', 'gate'));
//console.log(announcement.replaceAll('door', 'gate')); // working in 2021

// regex
console.log(announcement.replace(/door/g, 'gate'));

// booleans
const plane = 'Airbus A320neo';
console.log(plane.includes('A320')); //true
console.log(plane.includes('Boeing')); //false
console.log(plane.startsWith('Air')); //true

if (plane.startsWith('Airbus') && plane.endsWith('neo')) {
  console.log('Part of the NEW Airbus family');
}

// practice exercise
const checkBaggage = function (items) {
  const baggage = items.toLocaleLowerCase();
  if (baggage.includes('knife') || baggage.includes('gun')) {
    console.log('You are not allowed on board');
  } else {
    console.log('Welcome Aboard!');
  }
};

checkBaggage('I have a laptop, some food, and a pocket Knife');
checkBaggage('Socks and camera');
checkBaggage('Got some snacks and a gun for protection'); */

/********************************/
/* WORKING WITH STRINGS I
/********************************/
/* 
//strings can behave like arrays and are 0-based

const airline = 'TAP Air Portugal';
const plane = 'A320';

console.log(plane[0]); // 'A'
console.log(plane[1]); // 3
console.log(plane[2]); // 2
console.log('B737'[0]); // 'B'

console.log(airline.length);
console.log('B737'.length);

console.log(airline.indexOf('r'));
console.log(airline.lastIndexOf('r'));
console.log(airline.indexOf('Portugal')); //case-sensitive

console.log(airline.slice(4)); // 'Air Portugal' //starts to extract at the index indicated

console.log(airline.slice(4, 7)); //'Air' //stops extracting at one before the index specified

console.log(airline.slice(0, airline.indexOf(' '))); //'TAP'
console.log(airline.slice(airline.lastIndexOf(' ') + 1)); // 'Portugal'

console.log(airline.slice(-2)); //starts from the end
console.log(airline.slice(1, -1)); // 'AP Air Portuga'

const checkMiddleSeat = function (seat) {
  //B and E are middle seats
  const s = seat.slice(-1);

  if (s === 'B' || s === 'E') console.log('You got the middle seat. :(');
  else console.log('You got lucky :)');
};

checkMiddleSeat('11B');
checkMiddleSeat('23C');
checkMiddleSeat('3E');

// In JS string is converted to an object, that is why it has methods. (BOXING) then converted back to string
console.log(new String('Juuzo'));
console.log(typeof new String('Juuzo'));
console.log(typeof new String('Juuzo').slice(1));
 */

/********************************/
/* ARRAYS VS. SET / OBJECTS VS. MAPS
/********************************/

/*
Arrays -> when you need ordered list of values and to manipulate data
Sets -> unique values and to remove duplicates
Objects -> traditional key-value, easy access and can use '.' and '[]', when methods are needed
Maps -> can use any data type as key, easy to iterate and compute size, use this when need keys that are not strings
*/

/********************************/
/* MAPS (with Iteration)
/********************************/
/* 
const question = new Map([
  ['question', "What is Juuzo's job?"],
  [1, 'Teacher'],
  [2, 'Resolver'],
  [3, 'Preacher'],
  ['correct', 2],
  [true, 'Correct!'],
  [false, 'Try again!'],
]);

console.log(question);

//convert object into a map
console.log(Object.entries(openingHours));
const hoursMap = new Map(Object.entries(openingHours));
console.log(hoursMap);

//iteration (quiz app)
console.log(question.get('question'));
for (const [key, value] of question) {
  if (typeof key === 'number') console.log(`Answer ${key}: ${value}`);
}

//const answer = Number(prompt('Your answer'));
const answer = 2;
console.log(answer);
console.log(question.get(answer === question.get('correct')));

//convert map to array
console.log([...question]);
console.log([...question.keys()]);
console.log([...question.values()]);
 */

/********************************/
/* MAPS
/********************************/

// to map values to key-value pairs / keys are any types
/* 
const rest = new Map();

rest.set('name', 'Classico Italiano');
rest.set(1, 'Firenze, Italy');
rest.set(2, 'Lisbon, Portugal');
console.log(rest);

//chaining key values in maps
rest
  .set('categories', ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'])
  .set('open', 11)
  .set('close', 23)
  .set(true, 'We are open')
  .set(false, 'We are closed');

//by retrieving data type applies
console.log(rest.get('name'));
console.log(rest.get(true));
console.log(rest.get(1));

//boolean as key
const time = 21;
console.log(rest.get(time > rest.get('open') && time < rest.get('close')));

//other methods on rest
console.log(rest.has('categories')); //true
rest.delete(2);
//rest.clear();
console.log(rest);
console.log(rest.size);

//array as a key
const arr = [1, 2];
rest.set(arr, 'Test');
console.log(rest.get(arr));

//DOM as key
rest.set(document.querySelector('h1'), 'Heading');
 */

/********************************/
/* SETS
/********************************/

// has unique elements but no index and order does not matter
/* 
const ordersSet = new Set([
  'Pasta',
  'Pizza',
  'Pizza',
  'Risotto',
  'Pasta',
  'Pizza',
]);

console.log(ordersSet); // Pasta, Pizza, Risotto //duplicates removed
console.log(new Set('Juuzo'));

console.log(ordersSet.size); //returns number of elements in a set without duplicates
console.log(ordersSet.has('Pizza')); //true
console.log(ordersSet.has('Bread')); //false

ordersSet.add('Garlic Bread');
ordersSet.add('Garlic Bread');
console.log(ordersSet);
ordersSet.delete('Risotto');
//ordersSet.clear(); // empties the entire set
console.log(ordersSet);

for (const order of ordersSet) console.log(order);

// Example for a set
const staff = ['Waiter', 'Chef', 'Waiter', 'Manager', 'Chef', 'Waiter'];

const staffUnique = [...new Set(staff)]; // to turn into an array again
console.log(staffUnique);

console.log(
  new Set(['Waiter', 'Chef', 'Waiter', 'Manager', 'Chef', 'Waiter']).size
);

console.log(new Set('juuzoinui').size); */

/********************************/
/* LOOPING ON OBJECTS
/********************************/
/* 
//looping on property names
const properties = Object.keys(openingHours);
console.log(properties); //returns an array of properties

let openStr = `We are open on ${properties.length} days: `;

// looping over property names / keys
for (const day of properties) {
  //console.log(day);
  openStr += `${day}, `;
}
console.log(openStr);

// looping on property values
const values = Object.values(openingHours);
console.log(values); //returns an array of values

// looping on key and value / entire object
const entries = Object.entries(openingHours);
//console.log(entries); //returns an array with property first then value

// with destructuring
for (const [key, { open, close }] of entries) {
  console.log(`On ${key} we open at ${open} and close at ${close}`);
}
 */

/********************************/
/* OPTIONAL CHAINING
/********************************/

/* if (restaurant.openingHours && restaurant.openingHours.mon)
  console.log(restaurant.openingHours.mon.open);

// if (restaurant.openingHours.fri) console.log(restaurant.openingHours.fri.open);

//ES2020 optional chaining - can return undefined if property doesn't exist - ? (not null and not undefined, 0 and empty string are still true)
console.log(restaurant.openingHours.mon?.open);
console.log(restaurant.openingHours?.mon?.open);

const days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];

//ES2020 optional chaining with nullish operator
for (const day of days) {
  console.log(day);
  const open = restaurant.openingHours[day]?.open ?? 'closed';
  console.log(`On ${day}, we open at ${open}`);
}

// optional chaining for methods
console.log(restaurant.order?.(0, 1) ?? 'Method does not exist!');
console.log(restaurant.orderRisotto?.(0, 1) ?? 'Method does not exist!');

// optional chaining for arrays
const users = [{ name: 'Juuzo', email: 'hello@juuzo.io' }];

console.log(users[0]?.name ?? 'User array empty');

//without optional chaining
if (users.length > 0) console.log(users[0].name);
else console.log('user array empty'); */

/********************************/
/* LOOPING ARRAYS WITH FOR-OF
/********************************/
/* 
// can still use break and continue

const menu = [...restaurant.starterMenu, ...restaurant.mainMenu];

for (const item of menu) console.log(item);

// to get current index
// for (const item of menu.entries()) {
//   //console.log(`${item[0] + 1}: ${item[1]}`);

// }

//with destructuring
for (const [i, el] of menu.entries()) {
  console.log(`${i + 1}: ${el}`);
}

console.log([...menu.entries()]); //array iterator
 */
/********************************/
/* NULLISH COALESCING (??)
/********************************/
/* 
// nullish coalescing - short circuits nullish values (0 / '')
restaurant.numGuests = 0;

const guests2 = restaurant.numGuests || 10;
console.log(guests2);

// nullish: null and undefined // 0 and '' are true
const guestCorrect = restaurant.numGuests ?? 10;
console.log(guestCorrect);
 */

/********************************/
/* SHORT CIRCUIT && / II
/********************************/
/* 
// logical operators can use any data type, return any data type, and do short circuit
// short circuit -
//OR operator - if first value is a truthy, it will return the value / return last value if all are falsy

// OR operator
console.log(3 || 'Juuzo'); //3
console.log('' || 'Juuzo'); //Juuzo
console.log(true || 0); //true
console.log(undefined || null); //null

console.log(undefined || 0 || '' || 'Hello' || 23 || null); // 'Hello'

// example
//normal ternary
restaurant.numGuests = 23;
const guests1 = restaurant.numGuests ? restaurant.numGuests : 10;
console.log(guests1);

//short circuit
const guests2 = restaurant.numGuests || 10;
console.log(guests2);

//short circuit AND OPERATOR
// returns the first falsy value or last value if all are truthy
console.log('---------AND--------');
console.log(0 && 'Juuzo'); //0
console.log(7 && 'Juuzo'); //'Juuzo'

console.log('Hello' && 23 && null && 'Juuzo'); //null

//practical example (&&)
//normal if
if (restaurant.orderPizza) {
  restaurant.orderPizza('mushrooms', 'spinach');
}

//short circuit
restaurant.orderPizza && restaurant.orderPizza('mushrooms', 'spinach');
 */
/********************************/
/* REST PATTERN AND PARAMETERS
/********************************/
/* 
// REST -  collect remaining parameters in an array / put the rest of the elements in an array

//SPREAD - at the right side of = sign
const arr = [1, 2, ...[3, 4]];

//REST - at the left side of = sign
const [a, b, ...others] = [1, 2, 3, 4, 5];
console.log(a, b, others);

//... syntax together / there must be only one REST in any destructuring assignment and must be last element
const [pizza, , risotto, ...otherFood] = [
  ...restaurant.mainMenu,
  ...restaurant.starterMenu,
];

console.log(pizza, risotto, otherFood);

// REST In objects
const { sat, ...weekdays } = restaurant.openingHours;
console.log(weekdays);

// REST in functions
const add = function (...numbers) {
  console.log(numbers);

  let sum = 0;
  for (let i = 0; i < numbers.length; i++) {
    sum += numbers[i];
  }
  console.log(sum);
};

add(2, 3);
add(5, 3, 7, 2);
add(8, 2, 5, 3, 2, 1, 4);

const x = [23, 5, 7];
add(...x);

// REST in methods
restaurant.orderPizza('mushrooms', 'onion', 'olives', 'spinach');

restaurant.orderPizza('mushrooms');
 */

/********************************/
/* SPREAD OPERATOR
/********************************/
/* 
// when you need the elements of the array individually
// when building an array or passing to a function

const arr = [7, 8, 9];
const badNewArr = [1, 2, arr[0], arr[1], arr[2]];
console.log(badNewArr);

const newArr = [1, 2, ...arr];
console.log(newArr); //[1, 2, 7, 8, 9]

console.log(...newArr); // 1, 2, 7, 8, 9

const newMenu = [...restaurant.mainMenu, 'Gnocci'];
console.log(newMenu);

// shallow copying array
const mainMenuCopy = [...restaurant.mainMenu];

// join 2 arrays
const menu = [...restaurant.mainMenu, ...restaurant.starterMenu];
console.log(menu);

// spread operators work on iterables - arrays, strings, maps, sets
const str = 'Juuzo';
const letters = [...str, ' ', 'I.'];
console.log(letters);
console.log(...str);
//${...str} will not work

//real world example
// const ingredients = [
//   prompt(`Let's make pasta! Ingredient 1?`),
//   prompt(`Let's make pasta! Ingredient 2?`),
//   prompt(`Let's make pasta! Ingredient 3?`),
// ];

//console.log(ingredients);

//restaurant.orderPasta(...ingredients);

// ES2018 objects and spread operator
const newRestaurant = { foundedIn: 1998, ...restaurant, founder: 'Guiseppe' };
console.log(newRestaurant);

//shallow copy object with spread operator
const restaurantCopy = { ...restaurant };
restaurantCopy.name = 'Ristorante Roma';
console.log(restaurantCopy.name);
console.log(restaurant.name);
 */

/********************************/
/* DESTRUCTURING OBJECTS
/********************************/
/* 
//passing object as an argument
restaurant.orderDelivery({
  time: '22:30',
  address: 'Via del Sole, 21',
  mainIndex: 2,
  starterIndex: 2,
});

restaurant.orderDelivery({
  address: 'Via del Sole, 21',
  starterIndex: 1,
});

//destructuring objects
const { name, openingHours, categories } = restaurant;
console.log(name, openingHours, categories);

//changing the variable name
const {
  name: restaurantName,
  openingHours: hours,
  categories: tags,
} = restaurant;
console.log(restaurantName, hours, tags);

//setting default values
const { menu = [], starterMenu: starters = [] } = restaurant;
console.log(menu, starters);

//Mutating variables
let a = 111;
let b = 999;
const obj = { a: 23, b: 7, c: 14 };

({ a, b } = obj); //wrap in parenthesis to avoid unavailable token
console.log(a, b);

// Nested objects
const {
  fri: { open: o, close: c },
} = openingHours;
console.log(o, c);
 */

/********************************/
/* DESTRUCTURING ARRAYS
/********************************/
/* 
//without destructuring
const arr = [2, 3, 4];
const a = arr[0];
const b = arr[1];
const c = arr[2];

//destructuring arrays - [] destructuring assignment
//original array is not touched
const [x, y, z] = arr;
console.log(x, y, z);

const [first, second] = restaurant.categories;
console.log(first, second);

// leave a hole to skip
let [one, , three] = restaurant.categories;
console.log(one, three);

//switching variables
[one, three] = [three, one];
console.log(one, three);

//destructuring a returned variable from a function
const [starter, mainCourse] = restaurant.order(2, 0);
console.log(starter, mainCourse);

//destructuring nested arrays
const nested = [2, 4, [5, 6]];
// const [i, , j] = nested;
// console.log(i, j);
const [i, , [j, k]] = nested;
console.log(i, j, k);

// Default values
const [p = 1, q = 1, r = 1] = [8, 9];
console.log(p, q, r); // 8, 9, 1

 */

/********************************/
/* CODING CHALLENGE 1
/********************************/

/* We're building a football betting app (soccer for my American friends 😅)!

Suppose we get data from a web service about a certain game (below). In this challenge we're gonna work with the data. So here are your tasks:

1. Create one player array for each team (variables 'players1' and 'players2')
2. The first player in any player array is the goalkeeper and the others are field players. For Bayern Munich (team 1) create one variable ('gk') with the goalkeeper's name, and one array ('fieldPlayers') with all the remaining 10 field players
3. Create an array 'allPlayers' containing all players of both teams (22 players)
4. During the game, Bayern Munich (team 1) used 3 substitute players. So create a new array ('players1Final') containing all the original team1 players plus 'Thiago', 'Coutinho' and 'Perisic'
5. Based on the game.odds object, create one variable for each odd (called 'team1', 'draw' and 'team2')
6. Write a function ('printGoals') that receives an arbitrary number of player names (NOT an array) and prints each of them to the console, along with the number of goals that were scored in total (number of player names passed in)
7. The team with the lower odd is more likely to win. Print to the console which team is more likely to win, WITHOUT using an if/else statement or the ternary operator.

TEST DATA FOR 6: Use players 'Davies', 'Muller', 'Lewandowski' and 'Kimmich'. Then, call the function again with players from game.scored */
/* 
const game = {
  team1: 'Bayern Munich',
  team2: 'Borrussia Dortmund',
  players: [
    [
      'Neuer',
      'Pavard',
      'Martinez',
      'Alaba',
      'Davies',
      'Kimmich',
      'Goretzka',
      'Coman',
      'Muller',
      'Gnarby',
      'Lewandowski',
    ],
    [
      'Burki',
      'Schulz',
      'Hummels',
      'Akanji',
      'Hakimi',
      'Weigl',
      'Witsel',
      'Hazard',
      'Brandt',
      'Sancho',
      'Gotze',
    ],
  ],
  score: '4:0',
  scored: ['Lewandowski', 'Gnarby', 'Lewandowski', 'Hummels'],
  date: 'Nov 9th, 2037',
  odds: {
    team1: 1.33,
    x: 3.25,
    team2: 6.5,
  },
};

//1.
const players1 = game.players[0];
const players2 = game.players[1];

//const [players1, players2] = game.players

console.log(players1);
console.log(players2);

//2.
const [gk, ...fieldPlayers] = players1;
console.log(gk, fieldPlayers);

//3.
const allPlayers = [...game.players[0], ...game.players[1]];
console.log(allPlayers);

//4.
const players1Final = [...players1, 'Thiago', 'Coutinho', 'Perisic'];

//5.
const {
  odds: { team1: team1, x: draw, team2: team2 },
} = game;
console.log(team1, draw, team2);

//6.
function printGoals(...goals) {
  for (let i = 0; i < goals.length; i++) {
    console.log(`${goals[i]} scored a goal!`);
  }

  console.log(`${goals.length} goals scored in total!`);
}

printGoals('Davies', 'Muller', 'Lewandowski', 'Kimmich');

console.log(`----Game Scored----`);
printGoals(...game.scored);

//7.
team1 < team2 && console.log('Team 1 is more likely to win');
team2 < team1 && console.log('Team 2 is more likely to win');
 */

/********************************/
/* CODING CHALLENGE #2
/********************************/

/* 
Let's continue with our football betting app!

1. Loop over the game.scored array and print each player name to the console, along with the goal number (Example: "Goal 1: Lewandowski")
2. Use a loop to calculate the average odd and log it to the console (We already studied how to calculate averages, you can go check if you don't remember)
3. Print the 3 odds to the console, but in a nice formatted way, exaclty like this:
      Odd of victory Bayern Munich: 1.33
      Odd of draw: 3.25
      Odd of victory Borrussia Dortmund: 6.5
Get the team names directly from the game object, don't hardcode them (except for "draw"). HINT: Note how the odds and the game objects have the same property names 😉

BONUS: Create an object called 'scorers' which contains the names of the players who scored as properties, and the number of goals as the value. In this game, it will look like this:
      {
        Gnarby: 1,
        Hummels: 1,
        Lewandowski: 2
      }

GOOD LUCK 😀
*/
/* 
const game = {
  team1: 'Bayern Munich',
  team2: 'Borrussia Dortmund',
  players: [
    [
      'Neuer',
      'Pavard',
      'Martinez',
      'Alaba',
      'Davies',
      'Kimmich',
      'Goretzka',
      'Coman',
      'Muller',
      'Gnarby',
      'Lewandowski',
    ],
    [
      'Burki',
      'Schulz',
      'Hummels',
      'Akanji',
      'Hakimi',
      'Weigl',
      'Witsel',
      'Hazard',
      'Brandt',
      'Sancho',
      'Gotze',
    ],
  ],
  score: '4:0',
  scored: ['Lewandowski', 'Gnarby', 'Lewandowski', 'Hummels'],
  date: 'Nov 9th, 2037',
  odds: {
    team1: 1.33,
    x: 3.25,
    team2: 6.5,
  },
};

//#1
for (const [i, name] of game.scored.entries()) {
  console.log(`Goal ${i + 1}: ${name}`);
}

//#2
let average = 0;
const odds = Object.values(game.odds);
for (const odd of Object.values(game.odds)) {
  average += odd;
}
average /= odds.length;
console.log(average);

//#3
const entries = Object.entries(game.odds);
for (const [key, value] of entries) {
  console.log(
    `Odd of ${game[key] ? 'victory ' + game[key] : 'draw'}: ${value}`
  );
}

//BONUS
const scorers = {};
for (const player of game.scored) {
  scorers[player] ? scorers[player]++ : (scorers[player] = 1);
}
console.log(scorers);
 */

/********************************/
/* CODING CHALLENGE #3
/********************************/
/* 
Let's continue with our football betting app! This time, we have a map with a log of the events that happened during the game. The values are the events themselves, and the keys are the minutes in which each event happened (a football game has 90 minutes plus some extra time).

1. Create an array 'events' of the different game events that happened (no duplicates)
2. After the game has finished, is was found that the yellow card from minute 64 was unfair. So remove this event from the game events log.
3. Print the following string to the console: "An event happened, on average, every 9 minutes" (keep in mind that a game has 90 minutes)
4. Loop over the events and log them to the console, marking whether it's in the first half or second half (after 45 min) of the game, like this:
      [FIRST HALF] 17: ⚽️ GOAL

GOOD LUCK 😀
*/
/* 
const gameEvents = new Map([
  [17, '⚽️ GOAL'],
  [36, '🔁 Substitution'],
  [47, '⚽️ GOAL'],
  [61, '🔁 Substitution'],
  [64, '🔶 Yellow card'],
  [69, '🔴 Red card'],
  [70, '🔁 Substitution'],
  [72, '🔁 Substitution'],
  [76, '⚽️ GOAL'],
  [80, '⚽️ GOAL'],
  [92, '🔶 Yellow card'],
]);

//#1
const events = [...new Set(gameEvents.values())];
console.log(events);

//#2
gameEvents.delete(64);
console.log(gameEvents);

//#3
const time = [...gameEvents.keys()].pop();
console.log(time);
console.log(
  `An event happened, on average, every ${Math.round(
    time / gameEvents.size
  )} minutes.`
);

//#4
for (const [key, value] of gameEvents) {
  const half = key <= 45 ? '[FIRST HALF]' : '[SECOND HALF]';
  console.log(`${half} ${key}: ${value}`);
}
 */

/********************************/
/* CODING CHALLENGE #4
/********************************/
/*
Write a program that receives a list of variable names written in underscore_case and convert them to camelCase.

The input will come from a textarea inserted into the DOM (see code below), and conversion will happen when the button is pressed.

THIS TEST DATA (pasted to textarea)
underscore_case
 first_name
Some_Variable 
  calculate_AGE
delayed_departure

SHOULD PRODUCE THIS OUTPUT (5 separate console.log outputs)
underscoreCase      ✅
firstName           ✅✅
someVariable        ✅✅✅
calculateAge        ✅✅✅✅
delayedDeparture    ✅✅✅✅✅

HINT 1: Remember which character defines a new line in the textarea 😉
HINT 2: The solution only needs to work for a variable made out of 2 words, like a_b
HINT 3: Start without worrying about the ✅. Tackle that only after you have the variable name conversion working 😉
HINT 4: This challenge is difficult on purpose, so start watching the solution in case you're stuck. Then pause and continue!

Afterwards, test with your own test data!

GOOD LUCK 😀
*/

document.body.append(document.createElement('textarea'));
document.body.append(document.createElement('button'));

document.querySelector('button').addEventListener('click', function () {
  const text = document.querySelector('textarea').value;
  const textSplit = text.split('\n');

  console.log(textSplit);

  for (const [i, el] of textSplit.entries()) {
    const [first, second] = el.trim().toLowerCase().split('_');
    const camelCaseHolder = [];
    // console.log(first, second);
    camelCaseHolder.push(first);
    camelCaseHolder.push(second.replace(second[0], second[0].toUpperCase()));
    console.log(
      `${camelCaseHolder.join('').padEnd(20)}  ${'check '.repeat(i + 1)}`
    );
  }
});

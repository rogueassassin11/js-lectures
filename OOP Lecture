'use strict';

/************************************************/
/* OOP CONCEPTS
/************************************************/

// Abstraction - hide details that don't matter

// Encapsulation - keeping properties and methods unaccessible or accessible through API
// state - object's data

// Inheritance - makes all properties and methods from a parent class available to a child class

// Polymorphism - a child class can overwrite a method it inherited from a parent class

/************************************************/
/* OOP IN JS
/************************************************/

// each object has a prototype

//prototypal inheritance - all objects can use the properties and methods from a prototype / method is delegated by object to prototype

// 1. Constructor function - creates objects from a function (array, map, set)

// 2. ES6 classes - abstraction / different syntax of constructor functions / still prototypal inheritance

// 3. Object.create

/************************************************/
/* CONSTRUCTOR FUNCTIONS
/************************************************/

// constructor functions start with a capital letter / arrow functions do not work because has no 'this' keyword

// 1. New {} is created
// 2. Function is called, this = {}
// 3. {} linked to a prototype
// 4. function automatically returns {}
/* 
const Person = function (firstName, birthYear) {
  //instance properties
  this.firstName = firstName;
  this.birthYear = birthYear;

  //never create a method in a constructor function
  // this.calcAge = function() {
  //   console.log(2021 - this.birthYear);
  // };
};

const elias = new Person('Elias', 1821);
console.log(elias);

const chise = new Person('Chise', 2005);
const lindel = new Person('Lindel', 1721);
console.log(chise, lindel);

console.log(elias instanceof Person); //true

Person.hey = function () {
  console.log('Hey there!');
};
 */

/************************************************/
/* PROTOTYPES
/************************************************/

//creating a method in the prototype / only one copy
/* Person.prototype.calcAge = function () {
  console.log(2021 - this.birthYear);
};

console.log(Person.prototype);

elias.calcAge(); //does not contain the calcAge method but has access to it through the prototype
chise.calcAge();

console.log(elias.__proto__);
console.log(elias.__proto__ === Person.prototype);

console.log(Person.prototype.isPrototypeOf(elias)); //true
console.log(Person.prototype.isPrototypeOf(Person)); //false

//setting properties on the prototype
Person.prototype.species = 'Mage';
console.log(elias.species, chise.species);

//checking property if owned by the object
console.log(elias.hasOwnProperty('firstName'));
console.log(elias.hasOwnProperty('species')); */

/************************************************/
/* PROTOTYPAL INHERITANCE
/************************************************/

//__proto__ always points to an object's prototype

// JS looks for the property or method in the prototype if not found in the object - prototype delegation

// prototype chain -> Object.prototype is the prototype of any constructor prototype // looks for methods/properties in the chain if not found in the object

/* console.log(elias.__proto__); //person prototype
console.log(elias.__proto__.__proto__); // object.prototype
console.log(elias.__proto__.__proto__.__proto__); //null

console.dir(Person.prototype.constructor);

const arr = [3, 6, 4, 5, 6, 9, 3];
console.log(arr.__proto__); //each array inherits methods from the array prototype

console.log(arr.__proto__ === Array.prototype); //true
console.log(arr.__proto__.__proto__); // object prototype

//adding a method to the array prototype
Array.prototype.unique = function () {
  return [...new Set(this)];
};

console.log(arr.unique());

const h1 = document.querySelector('h1');
console.dir(x => x + 1); */

/************************************************/
/* CODING CHALLENGE #1
/************************************************/

/* const Car = function (make, speed) {
  this.make = make;
  this.speed = speed;
};

Car.prototype.accelerate = function () {
  this.speed += 10;
  console.log(`${this.make} going at ${this.speed} km/h`);
};

Car.prototype.brake = function () {
  this.speed -= 5;
  console.log(`${this.make} going at ${this.speed} km/h`);
};

const bmw = new Car('BMW', 120);
const mercedes = new Car('Mercedes', 95);

bmw.accelerate();
bmw.accelerate();
bmw.accelerate();
bmw.brake();
mercedes.accelerate();
mercedes.brake(); */

/************************************************/
/* ES6 CLASSES
/************************************************/

//class expression
// const PersonCl = class {

// }

/* //class declaration
class PersonCl {
  constructor(fullName, birthYear) {
    this.fullName = fullName;
    this.birthYear = birthYear;
  }

  //methods will be added to the prototype - still prototype inheritance
  calcAge() {
    console.log(2021 - this.birthYear);
  }

  greet() {
    console.log(`Hey ${this.firstName}`);
  }

  get age() {
    return 2037 - this.birthYear;
  }

  //setting a property that already exists
  set fullName(name) {
    console.log(name);
    if (name.includes(' ')) this._fullName = name;
    else alert(`${name} is not a full name!`);
  }

  get fullName() {
    return this._fullName;
  }

  static hey() {
    console.log(`Hey there!`);
    console.log(this);
  }
}

const elias = new PersonCl('Elias Ainsworth', 1821);
console.log(elias);
elias.calcAge();
console.log(elias.age);

console.log(elias.__proto__ === PersonCl.prototype); */

// PersonCl.prototype.greet = function () {
//   console.log(`Hey ${this.firstName}`);
// };

// elias.greet();

//1. Classes are not hoisted even if they are declarations
//2. Classes are first class - can be passed and returned from functions
//3. Classes are executed in strict mode

/* const chise = new PersonCl('Chise Hatori', 2005);
PersonCl.hey();
 */
/************************************************/
/* SETTERS AND GETTERS
/************************************************/

// setters and getters are functions/properties that get and set / kind of added as a property
/* 
const account = {
  owner: 'Elias',
  movements: [200, 530, 120, 300],

  get latest() {
    return this.movements.slice(-1).pop();
  },

  set latest(mov) {
    this.movements.push(mov);
  },
};

//get - has no call
console.log(account.latest);

//set
account.latest = 50;
console.log(account.movements); */

/************************************************/
/* STATIC METHODS
/************************************************/

//Array.from is attached in the array constructor
//Number.parseFloat is attached to the number constructor

/************************************************/
/* OBJECT.CREATE
/************************************************/

/* const PersonProto = {
  calcAge() {
    console.log(2021 - this.birthYear);
  },

  init(firstName, birthYear) {
    this.firstName = firstName;
    this.birthYear = birthYear;
  },
};

const kabu = Object.create(PersonProto);
console.log(kabu);
kabu.name = 'Kabu';
kabu.birthYear = '2002';
kabu.calcAge();

console.log(kabu.__proto__ === PersonProto);

const natsume = Object.create(PersonProto);

natsume.init('Natsume', 1979);
natsume.calcAge(); */

/************************************************/
/* CODING CHALLENGE #2
/************************************************/
/* 
class Car {
  constructor(make, speed) {
    this.make = make;
    this.speed = speed;
  }

  accelerate() {
    this.speed += 10;
    console.log(`${this.make} going at ${this.speed} km/h`);
  }

  brake() {
    this.speed -= 5;
    console.log(`${this.make} going at ${this.speed} km/h`);
  }

  get speedUS() {
    return this.speed / 1.6;
  }

  set speedUS(speed) {
    this.speed = speed * 1.6;
  }
}

const ford = new Car('Ford', 120);
ford.accelerate();
ford.accelerate();
ford.brake();
ford.speedUS = 50;
console.log(ford);
 */
/************************************************/
/* INHERITANCE BETWEEN 'CLASSES':
   CONSTRUCTOR FUNCTION
/************************************************/

/* const Person = function (firstName, birthYear) {
  this.firstName = firstName;
  this.birthYear = birthYear;
};

Person.prototype.calcAge = function () {
  console.log(2021 - this.birthYear);
};

const Student = function (firstName, birthYear, course) {
  Person.call(this, firstName, birthYear);
  this.course = course;
};

// Linking prototypes
Student.prototype = Object.create(Person.prototype);

Student.prototype.introduce = function () {
  console.log(`My name is ${this.firstName}, and I study ${this.course}`);
};

const juuzo = new Student('Juuzo', 2020, 'Computer Science');
console.log(juuzo);
juuzo.introduce();
juuzo.calcAge();

console.log(juuzo.__proto__.__proto__); //person.prototype

console.log(juuzo instanceof Student);
console.log(juuzo instanceof Person);
console.log(juuzo instanceof Object);

Student.prototype.constructor = Student;
console.dir(Student.prototype.constructor); */

/************************************************/
/* CODING CHALLENGE #3
/************************************************/

/* const Ev = function (make, speed, charge) {
  Car.call(this, make, speed);
  this.charge = charge;
};

//link the prototype
Ev.prototype = Object.create(Car.prototype);

Ev.prototype.chargeBattery = function (chargeTo) {
  this.charge = chargeTo;
};

Ev.prototype.accelerate = function () {
  this.speed += 20;
  this.charge -= 1;
  console.log(
    `${this.make} going at ${this.speed} km/h, with a charge of ${this.charge}%`
  );
};

const tesla = new Ev('Tesla', 120, 23);
console.log(tesla);
tesla.accelerate();
tesla.accelerate();
tesla.chargeBattery(50);
tesla.accelerate();
tesla.brake();
 */

/************************************************/
/* INHERITANCE BETWEEN CLASSES - ES6
/************************************************/
/* 
class PersonCl {
  constructor(fullName, birthYear) {
    this.fullName = fullName;
    this.birthYear = birthYear;
  }

  //methods will be added to the prototype - still prototype inheritance
  calcAge() {
    console.log(2021 - this.birthYear);
  }

  greet() {
    console.log(`Hey ${this.firstName}`);
  }

  get age() {
    return 2037 - this.birthYear;
  }

  //setting a property that already exists
  set fullName(name) {
    console.log(name);
    if (name.includes(' ')) this._fullName = name;
    else alert(`${name} is not a full name!`);
  }

  get fullName() {
    return this._fullName;
  }

  static hey() {
    console.log(`Hey there!`);
    console.log(this);
  }
}

//extend and super
class StudentCl extends PersonCl {
  constructor(fullName, birthYear, course) {
    //super always needs to happen first - responsible for the this keyword
    super(fullName, birthYear);
    this.course = course;
  }

  introduce() {
    console.log(`My name is ${this.fullName}, and I study ${this.course}`);
  }

  calcAge() {
    console.log(
      `I'm ${
        2037 - this.birthYear
      } years old, but as a student I feel more like a ${
        2037 - this.birthYear + 100
      }`
    );
  }
}

const lindel = new StudentCl('Lindel Lindenbaum', 2012, 'Zoology');
lindel.introduce();
lindel.calcAge(); */

/************************************************/
/* INHERITANCE BETWEEN CLASSES - OBJECT.CREATE
/************************************************/
/* 
const PersonProto = {
  calcAge() {
    console.log(2021 - this.birthYear);
  },

  init(firstName, birthYear) {
    this.firstName = firstName;
    this.birthYear = birthYear;
  },
};

const renfred = Object.create(PersonProto);

//alice inherits from StudentProto, StudentProto inherits from PersonProto
const StudentProto = Object.create(PersonProto);

StudentProto.init = function (firstName, birthYear, course) {
  PersonProto.init.call(this, firstName, birthYear);
  this.course = course;
};

StudentProto.introduce = function () {
  console.log(`My name is ${this.firstName}, and I study ${this.course}`);
};

const alice = Object.create(StudentProto);
alice.init('Alice', 2010, 'Engineering');
alice.introduce();
alice.calcAge(); */

/************************************************/
/* ANOTHER CLASS EXAMPLE
   ENCAPSULATION - PRIVATE CLASS FIELDS & METHODS
/************************************************/

// 1. Public fields, 2. private fields, 3. public fields, 4. private methods, static methods

class Account {
  // 1. public fields
  locale = navigator.language;

  // 2. private fields (instances)
  #movements = [];
  #pin;

  constructor(owner, currency, pin) {
    this.owner = owner;
    this.currency = currency;

    //protected property convention: '_'
    // this._movements = [];
    this.#pin = pin;
    // this.locale = navigator.language;

    console.log(`Thanks for opening an account, ${owner}`);
  }

  //3. public methods
  //public interface
  getMovements() {
    return this.#movements;
  }

  deposit(val) {
    this.#movements.push(val);
  }

  withdraw(val) {
    this.deposit(-val);
  }

  requestLoan(val) {
    if (this.#approveLoan(val)) {
      this.deposit(val);
      console.log('Loan approved');
    }
  }

  //4. private methods - no browser supports this yet
  // #approveLoan(val) {
  _approveLoan(val) {
    return true;
  }

  //not available on instances, only on class
  static helper() {
    console.log('Helper');
  }
}

const acc1 = new Account('Elias', 'EUR', 1111);
acc1.deposit(250);
acc1.withdraw(140);
acc1.requestLoan(1000);

console.log(acc1.getMovements());
// console.log(acc1.#movements);
console.log(acc1);
console.log(acc1.pin);

Account.helper();
